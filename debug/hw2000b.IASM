; Asm codes generated by Shanghai Haier C Compiler
; HRCO, Ver: 1.0,0137

#INCLUDE       	<ES7P0693.INC>
#INCLUDE       	<OPERATION.INC>
	PUBLIC         	_#T0
	EXTERN         	MUL_TEMP
	EXTERN         	MUL_TEMP
	PUBLIC         	_hw2000b_port_init
	PUBLIC         	_hw2000b_init_1m
	PUBLIC         	_hw2000b_init_250k
	PUBLIC         	_hw2000b_set_osc_16M
	PUBLIC         	_hw2000b_set_power_max
	PUBLIC         	_hw2000b_set_power_5
	PUBLIC         	_hw2000b_set_power_0
	PUBLIC         	_hw2000b_set_power_negative_10
	PUBLIC         	_hw2000b_set_power_negative_20
	PUBLIC         	_hw2000b_set_frequence_2403
	PUBLIC         	_hw2000b_set_frequence_2420
	PUBLIC         	_hw2000b_set_frequence_2450
	PUBLIC         	_hw2000b_set_frequence_2460
	PUBLIC         	_hw2000b_set_frequence_2483
	PUBLIC         	_hw2000b_power_test
	PUBLIC         	_hw2000b_cancel_sw
	PUBLIC         	_hw2000b_tx_data
	PUBLIC         	_hw2000b_tx_dataDATA
	PUBLIC         	_hw2000b_rx_enable
	PUBLIC         	_hw2000b_rx_data
	PUBLIC         	_hw2000b_rx_dataDATA
	PUBLIC         	_hw2000b_power_down
	PUBLIC         	_hw2000b_power_on
	EXTERN         	_spi_init
	EXTERN         	_hw2000b_write_reg
	EXTERN         	_hw2000b_write_regDATA
	EXTERN         	_hw2000b_read_reg
	EXTERN         	_hw2000b_read_regDATA
	EXTERN         	_hw2000b_write_fifo
	EXTERN         	_hw2000b_write_fifoDATA
	EXTERN         	_hw2000b_read_fifo
	EXTERN         	_hw2000b_read_fifoDATA
	EXTERN         	_delay_ms
	EXTERN         	_delay_msDATA
	EXTERN         	_delay_us
	EXTERN         	_delay_usDATA
	PUBLIC         	_agcTab
	EXTERN         	__hw2000b_irq_request
	EXTERN         	__ack_count
	PUBLIC         	_reg_read_write_test
D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_hw2000b_cconst0#	CSEG           
	ADD            	PCRL,	1
_agcTab
	DB             	0X0 ,0X0 ,0X0 ,0X0 ,0X0 ,0X0 ,0X0 ,0X1 		; Bank 0
	DB             	0X0 ,0X2 ,0X0 ,0XA ,0X0 ,0X12 ,0X2 ,0X12 		; Bank 0
	DB             	0X4 ,0X12 ,0X6 ,0X4A ,0X8 ,0X4A ,0XA ,0X4A 		; Bank 0
	DB             	0XA ,0X52 ,0XA ,0X92 ,0XC ,0X92 ,0XC ,0XD2 		; Bank 0
	DB             	0XC ,0XDA ,0XC ,0XE3 		; Bank 0
_hw2000b_init_250k_i_43	EQU            	_hw2000b_init_250kDATA + 0X0		; Bank 0
_hw2000b_init_250k_#T20876_44	EQU            	_hw2000b_init_250kDATA + 0X1		; Bank 0
_hw2000b_init_250k_#T20889_44	EQU            	_hw2000b_init_250kDATA + 0X1		; Bank 0
_hw2000b_init_250k_#T20891_44	EQU            	_hw2000b_init_250kDATA + 0X3		; Bank 0
_hw2000b_init_250k_#T20892_44	EQU            	_hw2000b_init_250kDATA + 0X1		; Bank 0
_hw2000b_tx_data_reg_73	EQU            	_hw2000b_tx_dataDATA + 0X0		; Bank 0
_hw2000b_tx_data_#T21388_73	EQU            	_hw2000b_tx_dataDATA + 0X0		; Bank 0
_hw2000b_tx_data_#T21412_73	EQU            	_hw2000b_tx_dataDATA + 0X2		; Bank 0
_hw2000b_tx_data_#T21448_73	EQU            	_hw2000b_tx_dataDATA + 0X2		; Bank 0
_hw2000b_tx_data_#T21451_75	EQU            	_hw2000b_tx_dataDATA + 0X0		; Bank 0
_hw2000b_tx_data_#T21467_75	EQU            	_hw2000b_tx_dataDATA + 0X2		; Bank 0
_hw2000b_power_down_reg_value_87	EQU            	_hw2000b_power_downDATA + 0X0		; Bank 0
_hw2000b_power_down_#T21701_87	EQU            	_hw2000b_power_downDATA + 0X2		; Bank 0
_hw2000b_power_on_reg_value_89	EQU            	_hw2000b_power_onDATA + 0X0		; Bank 0
_hw2000b_power_on_#T21726_89	EQU            	_hw2000b_power_onDATA + 0X2		; Bank 0
#TMP	EQU            	?_TMP+ 0X2		; Bank 0
?_TMP_RET	EQU            	?_TMP		; Bank 0
_MULA_0#sh	EQU            	(MULA - 0X6080) % 0X40 + 0xC0		; Bank 0
_MULB_0#sh	EQU            	(MULB - 0X6080) % 0X40 + 0xC0		; Bank 0
_MULL_0#sh	EQU            	(MULL - 0X6080) % 0X40 + 0xC0		; Bank 0
_MULH_0#sh	EQU            	(MULH - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVEL_0#sh	EQU            	(DIVEL - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVEM_0#sh	EQU            	(DIVEM - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVSL_0#sh	EQU            	(DIVSL - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVSH_0#sh	EQU            	(DIVSH - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVQL_0#sh	EQU            	(DIVQL - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVQM_0#sh	EQU            	(DIVQM - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVRL_0#sh	EQU            	(DIVRL - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVRH_0#sh	EQU            	(DIVRH - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVC_0#sh	EQU            	(DIVC - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVEU_0#sh	EQU            	(DIVEU - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVEH_0#sh	EQU            	(DIVEH - 0X6080) % 0X40 + 0xC0		; Bank 0
_FRAH_0#sh	EQU            	(FRAH - 0X6080) % 0X40 + 0xC0		; Bank 0
_FRAL_0#sh	EQU            	(FRAL - 0X6080) % 0X40 + 0xC0		; Bank 0
	_DESC          	hw2000b_port_init,0X0,0X0,delay_ms
hw2000b_port_init#	CSEG           
_hw2000b_port_init
; /**************************************************************************
; * 版权声明：Copyright@2019 上海东软载波微电子有限公司
; * 文件名称：hw2000b.c
; * 功能描述：RF函数
; * 函数列表：hw2000b_port_init
; 			hw2000b_init_1m
; 			hw2000b_init_250k
; 			hw2000b_set_osc_16M
; 			hw2000b_set_power_max
; 			hw2000b_set_power_0
; 			hw2000b_set_power_negative_20
; 			hw2000b_set_frequence_2403
; 			hw2000b_set_frequence_2450
; 			hw2000b_set_frequence_2483
; 			hw2000b_power_test
; 			hw2000b_cancel_sw
; 			hw2000b_tx_data
; 			hw2000b_rx_enable
; 			hw2000b_rx_data
; 			hw2000b_power_down
; 			hw2000b_power_on
; * 文件作者：Ljj  
; * 文件版本： 
; * 完成日期：2023-08-23	
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; #include <hic.h>
; #include "type.h"
; #include "hw2000b.h"
; #include "spi.h"
; #include "timer.h"
; const uint16_t agcTab[18] = {0x0000, 0x0000, 0x0000, 0x0001, 0x0002, 0x000A,
;                              0x0012, 0x0212, 0x0412, 0x064A, 0x084A, 0x0A4A,
;                              0x0A52, 0x0A92, 0x0C92, 0x0CD2, 0x0CDA, 0x0CE3
; };
; extern	sbit		_hw2000b_irq_request;
; extern	uint16_t	_ack_count;
; //uint16_t reg_value1;
; /**************************************************************************
; * 函数名称：hw2000b_port_init
; * 功能描述：初始化hw2000b接口
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void hw2000b_port_init(void)
; {
#line 56	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	CE = 0;
	CLR            	BKSR
;   56:(    ASGN_0,          0 ,            ,       PB7)

; ITemplate_CLR_0_TMP
	BCC            	(_PB7_0)/8,	(_PB7_0)%8
#line 57	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	delay_ms(3);
;   57:(    PARA_2,          3 ,            ,        ms)

; ITemplate_ASGN1_4
	MOVI           	0x3
	SECTION        	0x1
	MOVA           	(_delay_msDATA+0X0) & 0X7F		; Bank 1
	MOVI           	0x0
	MOVA           	(_delay_msDATA+0X0+0x1) & 0X7F		; Bank 1
;   57:(      CALL, (delay_ms.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_delay_ms
	CALL           	_delay_ms		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 58	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	CE = 1;
;   58:(    ASGN_0,          1 ,            ,       PB7)

; ITemplate_SET_0_TMP
	BSS            	(_PB7_0)/8,	(_PB7_0)%8
#line 59	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	delay_ms(3);
;   59:(    PARA_2,          3 ,            ,        ms)

; ITemplate_ASGN1_4
	MOVI           	0x3
	MOVAR          	_delay_msDATA+0X0		; Bank 1
	MOVI           	0x0
	MOVAR          	_delay_msDATA+0X0+0x1		; Bank 1
;   59:(      CALL, (delay_ms.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_delay_ms
	CALL           	_delay_ms		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 60	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; }
;   60:(       RET,            ,            ,          )

; ITemplate_RET
	RET            			; Bank 0		; ShBank 0
	_DESC          	hw2000b_init_250k,0X2,0X0,hw2000b_write_reg

SECTION1hw2000b_init_250k	UNINTIAL       	0		; Bank 0
	ORG            	0X89		; Bank 0
_hw2000b_init_250kDATA	RSEG           	0X5		; Bank 0
hw2000b_init_250k#	CSEG           
_hw2000b_init_250k
; void reg_read_write_test()
; {
; 	uint8_t i=0;
;     hw2000b_write_reg(0x4C, 0x55AA);	//close write protection
;     uint16_t all_reg_value[0x6a+1] = {0};
;     for(i=0;i<=0x6a;i++)
;     {
;         all_reg_value[i] = hw2000b_read_reg(i);
;     }
;     //write 0 to all reg 
;     for(i=0;i<=0x6a;i++)
;     {
;         if(i != 0x4C)
;         {
;             hw2000b_write_reg(i,0x0000);
;         }
;         all_reg_value[i] = hw2000b_read_reg(i);
;     }
;     
;     //write 1 to all reg 
;     for(i=0;i<=0x6a;i++)
;     {
;         if(i != 0x4C && i != 0x4F)
;         {
;             hw2000b_write_reg(i,0xffff);
;         } else if(i == 0x4F)
;                 {
;                     hw2000b_write_reg(i,0x0000);
;                 }
;         all_reg_value[i] = hw2000b_read_reg(i);
;     }
;     
;     all_reg_value[0] = hw2000b_read_reg(0);//breakpoint test
; }
; /**************************************************************************
; * 函数名称：hw2000b_init_1m
; * 功能描述：初始化hw2000b，速率为1M，晶振12M,最大功率
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void hw2000b_init_1m(void)
; {
;     uint8_t i;
; 	hw2000b_write_reg(0x4C, 0x55AA);		//open write protection
; 	for (i = 0; i < 18; i++) {
;         hw2000b_write_reg(0x50 + i, agcTab[i]);            
;     }
; 	hw2000b_write_reg(0x0F, 0xFC04);//ES7W8020
;     hw2000b_write_reg(0x01, 0x4D58);//ES7W8020
;     hw2000b_write_reg(0x02, 0x04CC);//ES7W8020
;     hw2000b_write_reg(0x08, 0xB6C4);//ES7W8020
; 	hw2000b_write_reg(0x09, 0xB442);//ES7W8020
;     hw2000b_write_reg(0x4A, 0x326C);//ES7W8020
;     hw2000b_write_reg(0x0B, 0x0873);//ES7W8020    8dBm
;     hw2000b_write_reg(0x49, 0x1330);//ES7W8020
;     hw2000b_write_reg(0x27, 0x8F20);//ES7W8020
; 	hw2000b_write_reg(0x48, 0x4300);//ES7W8020
; 	hw2000b_write_reg(0x26, 0x000C);//ES7W8020
;     hw2000b_write_reg(0x28, 0x8401);//sync_thres 1bit
;     hw2000b_write_reg(0x2C, 0x918B);
;     hw2000b_write_reg(0x1B, 0xE754);
;     hw2000b_write_reg(0x06, 0xB000);
;     hw2000b_write_reg(0x07, 0x54E0);
;     hw2000b_write_reg(0x1C, 0x51A0);
;     hw2000b_write_reg(0x19, 0x2084);
;     hw2000b_write_reg(0x20, 0xF000);//preamble:16 bytes, sync:48 bits
;     hw2000b_write_reg(0x2A, 0xC07D);//rate:1Mbps, ACK_time:28us
; }
; /**************************************************************************
; * 函数名称：hw2000b_init_250k
; * 功能描述：初始化hw2000b，速率为250k,晶振12M，最大功率
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void hw2000b_init_250k(void)
; {
;     uint8_t i;
#line 154	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	hw2000b_write_reg(0x4C, 0x55AA);		//open write project
	CLR            	BKSR
;  154:(    PARA_1,         76 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x4c
	SECTION        	0x1
	MOVA           	(_hw2000b_write_regDATA+0X0) & 0X7F		; Bank 1
;  154:(    PARA_2,      21930 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0xaa
	MOVA           	(_hw2000b_write_regDATA+0X1) & 0X7F		; Bank 1
	MOVI           	0x55
	MOVA           	(_hw2000b_write_regDATA+0X1+0x1) & 0X7F		; Bank 1
;  154:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 155	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	for (i = 0; i < 18; i++) {
;  155:(    ASGN_1,          0 ,            ,         i)

; ITemplate_CLR1_4_TMP
	SECTION        	0x1
	CLR            	(_hw2000b_init_250k_i_43) & 0X7F		; Bank 1
;  155:(     LABEL,    #L20848 ,            ,          )

; ITemplate_LABEL
#L20848
;  155:(    JGE_1U,          i ,         18 ,   #L20849)

; ITemplate_JGE1_4U
	MOVI           	0x12
	SUB            	(_hw2000b_init_250k_i_43) & 0X7F,	0x0		; Bank 1
	JBC            	PSW,	0x0
	GOTO           	#L20849
#line 156	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ;         hw2000b_write_reg(0x50 + i, agcTab[i]);
;  156:(     ADD_1,          i ,         80 ,      addr)

; ITemplate_ADD1_4
	MOV            	(_hw2000b_init_250k_i_43) & 0X7F,	0x0		; Bank 1
	ADDI           	0x50
	MOVA           	(_hw2000b_write_regDATA+0X0) & 0X7F		; Bank 1
;  156:(   CVUC_SI,          i ,            ,   #T20889)

; ITemplate_CVTMS_U
	CLR            	(_hw2000b_init_250k_#T20889_44+0x1) & 0X7F		; Bank 1
	MOV            	(_hw2000b_init_250k_i_43) & 0X7F,	0x0		; Bank 1
	MOVA           	(_hw2000b_init_250k_#T20889_44) & 0X7F		; Bank 1
;  156:(    LSH_2S,    #T20889 ,          1 ,   #T20891)

; ITemplate_LSH1_4_1
	BCC            	PSW,	0x0
	RL             	(_hw2000b_init_250k_#T20889_44) & 0X7F,	0x0		; Bank 1
	MOVA           	(_hw2000b_init_250k_#T20891_44) & 0X7F		; Bank 1
	RL             	(_hw2000b_init_250k_#T20889_44+0x1) & 0X7F,	0x0		; Bank 1
	MOVA           	(_hw2000b_init_250k_#T20891_44+0x1) & 0X7F		; Bank 1
;  156:(     ADD_2,    #T20891 , (agcTab.0) ,   #T20892)

; ITemplate_ADD1_4
	MOV            	(_hw2000b_init_250k_#T20891_44) & 0X7F,	0x0		; Bank 1
	ADDI           	(_agcTab<<1)
	MOVA           	(_hw2000b_init_250k_#T20892_44) & 0X7F		; Bank 1
	MOV            	(_hw2000b_init_250k_#T20891_44+0x1) & 0X7F,	0x0		; Bank 1
	ADDCI          	HIGH((_agcTab<<1))
	MOVA           	(_hw2000b_init_250k_#T20892_44+0x1) & 0X7F		; Bank 1
;  156:(    PARA_2,   *#T20892 ,            ,     value)

; ITemplate_GetRomRef
	MOV            	(_hw2000b_init_250k_#T20892_44) & 0X7F,	0x0		; Bank 1
	MOVAR          	CSEG_PTR		; Bank 0
	MOV            	(_hw2000b_init_250k_#T20892_44+0x1) & 0X7F,	0x0		; Bank 1
	MOVAR          	CSEG_PTR+0x1		; Bank 0
	SEGMENTSEL     	STRINGTABLE
	SECTION        	0x0
	CALL           	STRINGTABLE		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
	MOVA           	(?_TMP) & 0X7F		; Bank 0
	SEGMENTSEL     	STRINGTABLE
	CALL           	STRINGTABLE		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
	MOVA           	(?_TMP+0x1) & 0X7F		; Bank 0
; ITemplate_ASGN1_4
	MOV            	(?_TMP) & 0X7F,	0x0		; Bank 0
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  156:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
;  155:(     ADD_1,          i ,          1 ,         i)

; ITemplate_INC_1_TMP
	SECTION        	0x1
	INC            	(_hw2000b_init_250k_i_43) & 0X7F		; Bank 1
#line 157	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ;     }
;  157:(       JMP,            ,            ,   #L20848)

; ITemplate_JMP
	GOTO           	#L20848
;  157:(     LABEL,    #L20849 ,            ,          )

; ITemplate_LABEL
#L20849
#line 159	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	hw2000b_write_reg(0x0F, 0xFC04);//ES7W8020
;  159:(    PARA_1,         15 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0xf
	MOVA           	(_hw2000b_write_regDATA+0X0) & 0X7F		; Bank 1
;  159:(    PARA_2,      64516 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x4
	MOVA           	(_hw2000b_write_regDATA+0X1) & 0X7F		; Bank 1
	MOVI           	0xfc
	MOVA           	(_hw2000b_write_regDATA+0X1+0x1) & 0X7F		; Bank 1
;  159:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 161	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ;     hw2000b_write_reg(0x01, 0x4D58);//ES7W8020
;  161:(    PARA_1,          1 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x1
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  161:(    PARA_2,      19800 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x58
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x4d
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  161:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 162	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ;     hw2000b_write_reg(0x02, 0x04CC);//ES7W8020
;  162:(    PARA_1,          2 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x2
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  162:(    PARA_2,       1228 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0xcc
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x4
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  162:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 163	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ;     hw2000b_write_reg(0x08, 0xB6C4);//ES7W8020
;  163:(    PARA_1,          8 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x8
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  163:(    PARA_2,      46788 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0xc4
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0xb6
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  163:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 164	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	hw2000b_write_reg(0x09, 0xB442);//ES7W8020  
;  164:(    PARA_1,          9 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x9
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  164:(    PARA_2,      46146 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x42
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0xb4
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  164:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 165	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ;     hw2000b_write_reg(0x4A, 0x326C);//ES7W8020 
;  165:(    PARA_1,         74 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x4a
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  165:(    PARA_2,      12908 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x6c
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x32
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  165:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 167	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ;     hw2000b_write_reg(0x0B, 0x0873);//ES7W8020   tx power:8dBm
;  167:(    PARA_1,         11 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0xb
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  167:(    PARA_2,       2163 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x73
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x8
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  167:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 168	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ;     hw2000b_write_reg(0x49, 0x1330);//ES7W8020   
;  168:(    PARA_1,         73 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x49
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  168:(    PARA_2,       4912 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x30
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x13
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  168:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 169	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ;     hw2000b_write_reg(0x27, 0x8F20);//ES7W8020   
;  169:(    PARA_1,         39 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x27
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  169:(    PARA_2,      36640 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x20
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x8f
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  169:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 170	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	hw2000b_write_reg(0x48, 0x4300);//ES7W8020
;  170:(    PARA_1,         72 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x48
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  170:(    PARA_2,      17152 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x0
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x43
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  170:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 171	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	hw2000b_write_reg(0x26, 0x000C);//ES7W8020
;  171:(    PARA_1,         38 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x26
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  171:(    PARA_2,         12 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0xc
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x0
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  171:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 173	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ;     hw2000b_write_reg(0x28, 0x8401);//sync_thres:1bit
;  173:(    PARA_1,         40 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x28
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  173:(    PARA_2,      33793 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x1
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x84
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  173:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 174	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ;     hw2000b_write_reg(0x2C, 0x918B);	
;  174:(    PARA_1,         44 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x2c
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  174:(    PARA_2,      37259 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x8b
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x91
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  174:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 175	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	hw2000b_write_reg(0x2A, 0x40FF);//rate:250kbps     ACK_time:1000us
;  175:(    PARA_1,         42 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x2a
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  175:(    PARA_2,      16639 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0xff
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x40
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  175:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 176	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	hw2000b_write_reg(0x1A, 0x0D31);
;  176:(    PARA_1,         26 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x1a
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  176:(    PARA_2,       3377 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x31
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0xd
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  176:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 177	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	hw2000b_write_reg(0x19, 0x0884);
;  177:(    PARA_1,         25 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x19
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  177:(    PARA_2,       2180 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x84
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x8
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  177:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 178	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	hw2000b_write_reg(0x20, 0xF000);//preamble:16 bytes  sync:48 bits
;  178:(    PARA_1,         32 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x20
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  178:(    PARA_2,      61440 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x0
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0xf0
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  178:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 180	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	hw2000b_write_reg(0x3C, 0x1001);//Enable PIPE0、PIPE0 ACK
;  180:(    PARA_1,         60 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x3c
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  180:(    PARA_2,       4097 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x1
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x10
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  180:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
; 	// pipe 0 addr set 
#line 183	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ;     hw2000b_write_reg(0x40, 0x1122); 
;  183:(    PARA_1,         64 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x40
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  183:(    PARA_2,       4386 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x22
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x11
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  183:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 184	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ;     hw2000b_write_reg(0x41, 0x3344); 
;  184:(    PARA_1,         65 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x41
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  184:(    PARA_2,      13124 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x44
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x33
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  184:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 185	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ;     hw2000b_write_reg(0x42, 0x5566); 
;  185:(    PARA_1,         66 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x42
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  185:(    PARA_2,      21862 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x66
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x55
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  185:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 187	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	hw2000b_write_reg(0x23, 0x0500);//re_tx_times:5
;  187:(    PARA_1,         35 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x23
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  187:(    PARA_2,       1280 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x0
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x5
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  187:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
; 	//reg_value1 = hw2000b_read_reg(0x28);
; 	//if(reg_value1 != 0x2103)
; 	//{
; 	//hw2000b_write_reg(0x20, 0xF000);//preamble:16 bytes  sync:48 bits
; 	//}
#line 194	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; }
;  194:(       RET,            ,            ,          )

; ITemplate_RET
	RET            			; Bank 0		; ShBank 0
	_DESC          	hw2000b_tx_data,0X2,0X0,hw2000b_write_reg,delay_us,hw2000b_write_fifo,hw2000b_read_reg

SECTION1hw2000b_tx_data	UNINTIAL       	0		; Bank 0
	ORG            	0X85		; Bank 0
_hw2000b_tx_dataDATA	RSEG           	0X4		; Bank 0
hw2000b_tx_data#	CSEG           
_hw2000b_tx_data
; /**************************************************************************
; * 函数名称：hw2000b_set_osc_16M
; * 功能描述：16M晶振设置
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void hw2000b_set_osc_16M(void)
; {
;     hw2000b_write_reg(0x04, 0x4800);
;     hw2000b_write_reg(0x22, 0x2030);
;     hw2000b_write_reg(0x1C, 0x5198);
; }
; /**************************************************************************
; * 函数名称：hw2000b_set_power_max
; * 功能描述：设置发射功率为最大发射功率
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void hw2000b_set_power_max(void)
; {
;     hw2000b_write_reg(0x4C, 0x55AA);		//open write project
; 	hw2000b_write_reg(0x0B, 0x0873);//9
; }
; /**************************************************************************
; * 函数名称：hw2000b_set_power_5
; * 功能描述：设置发射功率为5dBm
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void hw2000b_set_power_5(void)
; {
;     hw2000b_write_reg(0x4C, 0x55AA);        //open write project
;     hw2000b_write_reg(0x0B, 0x085F);
; }
; /**************************************************************************
; * 函数名称：hw2000b_set_power_0
; * 功能描述：设置发射功率为0dBm
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void hw2000b_set_power_0(void)
; {
;     hw2000b_write_reg(0x4C, 0x55AA);		//open write project
; 	hw2000b_write_reg(0x0B, 0x0851);
; }
; /**************************************************************************
; * 函数名称：hw2000b_set_power_negative_10
; * 功能描述：设置发射功率为-10dBm
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void hw2000b_set_power_negative_10(void)
; {
;     hw2000b_write_reg(0x4C, 0x55AA);        //open write project
;     hw2000b_write_reg(0x0B, 0x0845); 
; }
; /**************************************************************************
; * 函数名称：hw2000b_set_power_negative_20
; * 功能描述：设置发射功率为-20dBm
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void hw2000b_set_power_negative_20(void)
; {
;     hw2000b_write_reg(0x4C, 0x55AA);		//open write project
; 	hw2000b_write_reg(0x0B, 0x0842);
; }
; /**************************************************************************
; * 函数名称：hw2000b_set_frequence_2403
; * 功能描述：设置发射频点为2.403GHz
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void hw2000b_set_frequence_2403(void)
; {
;     hw2000b_write_reg(0x22, 0x1801); //12M OSC
; }
; /**************************************************************************
; * 函数名称：hw2000b_set_frequence_2420
; * 功能描述：设置发射频点为2.420GHz
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void hw2000b_set_frequence_2420(void)
; {
;     hw2000b_write_reg(0x22, 0x1814); //12M OSC
; }
; /**************************************************************************
; * 函数名称：hw2000b_set_frequence_2450
; * 功能描述：设置发射频点为2.450GHz
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void hw2000b_set_frequence_2450(void)
; {
;     hw2000b_write_reg(0x22, 0x1830); //12M OSC
; }
; /**************************************************************************
; * 函数名称：hw2000b_set_frequence_2460
; * 功能描述：设置发射频点为2.460GHz
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void hw2000b_set_frequence_2460(void)
; {
;     hw2000b_write_reg(0x22, 0x183C); //12M OSC
; }
; /**************************************************************************
; * 函数名称：hw2000b_set_frequence_2483
; * 功能描述：设置发射频点为2.483GHz
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void hw2000b_set_frequence_2483(void)
; {
;     hw2000b_write_reg(0x22, 0x1851); //12M OSC
; }
; /**************************************************************************
; * 函数名称：hw2000b_power_test
; * 功能描述：单载波模式，供用户测试功率使用
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void hw2000b_power_test(void)
; {
; 	//发送单载波
; 	uint16_t reg_val;
; 	reg_val = hw2000b_read_reg(0x1C);
; 	hw2000b_write_reg(0x1C, reg_val & 0xFE7F); //寄存器的第7、8位置0  
; 	hw2000b_write_reg(0x29, 0x0000); //MCU control  
; 	hw2000b_write_reg(0x21, 0x0100); //TX enable	       
; 	hw2000b_write_reg(0x36, 0x0081);
; 	while(1)
; 	{
; 	;
; 	}
; }
; /**************************************************************************
; * 函数名称：hw2000b_cancel_sw
; * 功能描述：取消单载波模式
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void hw2000b_cancel_sw(void)
; {
;     uint16_t reg_val;
;     
;     hw2000b_write_reg(0x36, 0x0090);
;     hw2000b_write_reg(0x21, 0x0000); //TX disable
;     hw2000b_write_reg(0x29, 0x1800); //MCU control    
;     hw2000b_write_reg(0x3D, 0x0008); //clear int0
;     reg_val = hw2000b_read_reg(0x1C);
;     hw2000b_write_reg(0x1C, reg_val|0x0180); //bit7 1, bit8 1
; }
; /**************************************************************************
; * 函数名称：hw2000b_tx_data
; * 功能描述：发送处理函数
; * 输入参数：uint8_t *data, data[0]是数据长度
; * 返回参数：
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void hw2000b_tx_data(uint8_t *buf, uint16_t size)
; {
; 	uint16_t reg;
#line 429	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	_hw2000b_irq_request = 0;
	CLR            	BKSR
;  429:(    ASGN_0,          0 ,            ,_hw2000b_irq_request)

; ITemplate_CLR_0_TMP
	BCC            	((__hw2000b_irq_request)/8) & 0X7F,	(__hw2000b_irq_request)%8		; Bank 0
; 	
#line 431	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ;     hw2000b_write_reg(0x21, 0x0100);	//TX enable
;  431:(    PARA_1,         33 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x21
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  431:(    PARA_2,        256 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x0
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x1
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  431:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 432	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ;     delay_us(5);						//delete if lower spi rate,
;  432:(    PARA_2,          5 ,            ,     delay)

; ITemplate_ASGN1_4
	MOVI           	0x5
	MOVAR          	_delay_usDATA+0X0		; Bank 1
	MOVI           	0x0
	MOVAR          	_delay_usDATA+0X0+0x1		; Bank 1
;  432:(      CALL, (delay_us.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_delay_us
	CALL           	_delay_us		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 433	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	hw2000b_write_reg(0x3B, 0x8000);	//clear TX FIFO
;  433:(    PARA_1,         59 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x3b
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  433:(    PARA_2,      32768 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x0
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x80
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  433:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 434	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ;     hw2000b_write_fifo(0x32, buf, size);//write FIFO
;  434:(    PARA_1,         50 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x32
	MOVAR          	_hw2000b_write_fifoDATA+0X0		; Bank 1
;  434:(    PARA_2,        buf ,            ,      data)

; ITemplate_ASGN1_4
	MOVRA          	_hw2000b_tx_dataDATA+0X0		; Bank 1
	MOVAR          	_hw2000b_write_fifoDATA+0X1		; Bank 1
	MOVRA          	_hw2000b_tx_dataDATA+0X0+0x1		; Bank 1
	MOVAR          	_hw2000b_write_fifoDATA+0X1+0x1		; Bank 1
;  434:(   CVUI_UC,       size ,            ,   #T21388)

; ITemplate_CVSMT
	MOVRA          	_hw2000b_tx_dataDATA+0X2		; Bank 1
	MOVAR          	_hw2000b_tx_data_#T21388_73		; Bank 1
;  434:(    PARA_1,    #T21388 ,            ,    length)

; ITemplate_ASGN1_4
	MOVRA          	_hw2000b_tx_data_#T21388_73		; Bank 1
	MOVAR          	_hw2000b_write_fifoDATA+0X3		; Bank 1
;  434:(      CALL, (hw2000b_write_fifo.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_fifo
	CALL           	_hw2000b_write_fifo		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 435	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	reg = hw2000b_read_reg(0x36);
;  435:(    PARA_1,         54 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x36
	MOVAR          	_hw2000b_read_regDATA+0X0		; Bank 1
;  435:(     CALLR, (hw2000b_read_reg.0) ,            ,       reg)

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_read_reg
	CALL           	_hw2000b_read_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
	MOVAR          	_hw2000b_tx_data_reg_73		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_hw2000b_tx_data_reg_73+0x1		; Bank 1
#line 436	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	hw2000b_write_reg(0x36, 0x0081|reg);//FIFO0 occupy
;  436:(    PARA_1,         54 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x36
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  436:(     BOR_2,        129 ,        reg ,   #T21412)

; ITemplate_BOR1_4
	MOVRA          	_hw2000b_tx_data_reg_73		; Bank 1
	IORI           	0x81
	MOVAR          	_hw2000b_tx_data_#T21412_73		; Bank 1
	MOVRA          	_hw2000b_tx_data_reg_73+0x1		; Bank 1
	IORI           	0x0
	MOVAR          	_hw2000b_tx_data_#T21412_73+0x1		; Bank 1
;  436:(    PARA_2,    #T21412 ,            ,     value)

; ITemplate_ASGN1_4
	MOVRA          	_hw2000b_tx_data_#T21412_73		; Bank 1
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVRA          	_hw2000b_tx_data_#T21412_73+0x1		; Bank 1
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  436:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 437	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ;     hw2000b_write_reg(0x37, 0x0000);	//FIFO1 disable
;  437:(    PARA_1,         55 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x37
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  437:(    PARA_2,          0 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x0
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x0
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  437:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 439	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	while (!_hw2000b_irq_request);
;  439:(     LABEL,    #L21421 ,            ,          )

; ITemplate_LABEL
#L21421
;  439:(      JZ_0, _hw2000b_irq_request ,            ,   #L21421)

; ITemplate_JZ_0
	JBS            	((__hw2000b_irq_request)/8) & 0X7F,	(__hw2000b_irq_request)%8		; Bank 0
	GOTO           	#L21421
; 	
#line 441	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	reg = hw2000b_read_reg(0x36);
;  441:(    PARA_1,         54 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x36
	SECTION        	0x1
	MOVA           	(_hw2000b_read_regDATA+0X0) & 0X7F		; Bank 1
;  441:(     CALLR, (hw2000b_read_reg.0) ,            ,       reg)

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_read_reg
	CALL           	_hw2000b_read_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
	MOVAR          	_hw2000b_tx_data_reg_73		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_hw2000b_tx_data_reg_73+0x1		; Bank 1
#line 442	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ;     if ((reg & 0x8000) == 0x8000)		//rtx fail
;  442:(    BAND_2,      32768 ,        reg ,   #T21448)

; ITemplate_BAND1_4
	MOVRA          	_hw2000b_tx_data_reg_73		; Bank 1
	ANDI           	0x0
	MOVAR          	_hw2000b_tx_data_#T21448_73		; Bank 1
	MOVRA          	_hw2000b_tx_data_reg_73+0x1		; Bank 1
	ANDI           	0x80
	MOVAR          	_hw2000b_tx_data_#T21448_73+0x1		; Bank 1
;  442:(     JEQ_2,      32768 ,    #T21448 ,   #L21436)

; ITemplate_JEQ1_4
	MOVRA          	_hw2000b_tx_data_#T21448_73		; Bank 1
	XORI           	0x0
	JBS            	PSW,	0x2
	GOTO           	#L21760
	SECTION        	0x1
	MOV            	(_hw2000b_tx_data_#T21448_73+0x1) & 0X7F,	0x0		; Bank 1
	XORI           	0x80
	JBC            	PSW,	0x2
	GOTO           	#L21436
#L21760
; 	{
; 		//_ack_count--;					//添加重发超时处理代码
; 	}
; 	else
; 	{	//ack mode:recieve ack    no ack mode:tx success
#line 448	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 		if((hw2000b_read_reg(0x3C) & 0x000F) != 0)	//recieve ack
;  448:(    PARA_1,         60 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x3c
	SECTION        	0x1
	MOVA           	(_hw2000b_read_regDATA+0X0) & 0X7F		; Bank 1
;  448:(     CALLR, (hw2000b_read_reg.0) ,            ,   #T21451)

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_read_reg
	CALL           	_hw2000b_read_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
	MOVAR          	_hw2000b_tx_data_#T21451_75		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_hw2000b_tx_data_#T21451_75+0x1		; Bank 1
;  448:(    BAND_2,         15 ,    #T21451 ,   #T21467)

; ITemplate_BAND1_4
	MOVRA          	_hw2000b_tx_data_#T21451_75		; Bank 1
	ANDI           	0xf
	MOVAR          	_hw2000b_tx_data_#T21467_75		; Bank 1
	MOVRA          	_hw2000b_tx_data_#T21451_75+0x1		; Bank 1
	ANDI           	0x0
	MOVAR          	_hw2000b_tx_data_#T21467_75+0x1		; Bank 1
;  448:(      JZ_2,    #T21467 ,            ,   #L21453)

; ITemplate_JZ1_4
	SECTION        	0x1
	MOV            	(_hw2000b_tx_data_#T21467_75) & 0X7F,	0x0		; Bank 1
	IOR            	(_hw2000b_tx_data_#T21467_75+0x1) & 0X7F,	0x0		; Bank 1
	JBC            	PSW,	0x2
	GOTO           	#L21453
#line 449	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 			{_ack_count++;}
;  449:(     ADD_2, _ack_count ,          1 ,_ack_count)

; ITemplate_INC_2_TMP
	INC            	(__ack_count) & 0X7F		; Bank 1
	JBS            	PSW,	0x2
	GOTO           	#L21761
	INC            	(__ack_count+0x1) & 0X7F		; Bank 1
#L21761
;  449:(       JMP,            ,            ,   #L21436)

; ITemplate_JMP
	GOTO           	#L21436
#line 450	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 		else
;  450:(     LABEL,    #L21453 ,            ,          )

; ITemplate_LABEL
#L21453
#line 451	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 			{_ack_count = 0;}
;  451:(    ASGN_2,          0 ,            ,_ack_count)

; ITemplate_CLR1_4_TMP
	CLR            	(__ack_count) & 0X7F		; Bank 1
	CLR            	(__ack_count+0x1) & 0X7F		; Bank 1
#line 452	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	}
;  452:(     LABEL,    #L21436 ,            ,          )

; ITemplate_LABEL
#L21436
#line 453	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ;     hw2000b_write_reg(0x36, 0x0080);	//FIFO0 no occupy
;  453:(    PARA_1,         54 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x36
	MOVA           	(_hw2000b_write_regDATA+0X0) & 0X7F		; Bank 1
;  453:(    PARA_2,        128 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x80
	MOVA           	(_hw2000b_write_regDATA+0X1) & 0X7F		; Bank 1
	MOVI           	0x0
	MOVA           	(_hw2000b_write_regDATA+0X1+0x1) & 0X7F		; Bank 1
;  453:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 454	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	hw2000b_write_reg(0x3D, 0x0008);	//clear int0
;  454:(    PARA_1,         61 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x3d
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  454:(    PARA_2,          8 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x8
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x0
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  454:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 455	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	hw2000b_write_reg(0x21, 0x0000);	//TX disable
;  455:(    PARA_1,         33 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x21
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  455:(    PARA_2,          0 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x0
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x0
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  455:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
; 	//hw2000b_write_reg(0x23, 0x431B); //Soft reset			//会增加功耗
; 	//hw2000b_write_reg(0x23, 0x031B); 
; 	//delay_us(20);//delete if lower spi rate,
#line 459	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; }
;  459:(       RET,            ,            ,          )

; ITemplate_RET
	RET            			; Bank 0		; ShBank 0
	_DESC          	hw2000b_power_down,0X2,0X0,hw2000b_write_reg,hw2000b_read_reg

SECTION1hw2000b_power_down	UNINTIAL       	0		; Bank 0
	ORG            	0X85		; Bank 0
_hw2000b_power_downDATA	RSEG           	0X4		; Bank 0
hw2000b_power_down#	CSEG           
_hw2000b_power_down
; /**************************************************************************
; * 函数名称：hw2000b_rx_enable
; * 功能描述：接收使能
; * 输入参数：无
; * 返回参数：
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void hw2000b_rx_enable(void)
; {
; 	hw2000b_write_reg(0x3D, 0x0008);
; 	hw2000b_write_reg(0x21, 0x0000);
; 	hw2000b_write_reg(0x36, 0x0080);
; 	hw2000b_write_reg(0x37, 0x0000);
; 	hw2000b_write_reg(0x21, 0x0080);
; }
; /**************************************************************************
; * 函数名称：hw2000b_rx_data
; * 功能描述：接收函数
; * 输入参数：data
; * 返回参数：0 success -1 failed
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; int8_t hw2000b_rx_data(uint8_t *data)
; {
; 	uint16_t reg;
; 	if(_hw2000b_irq_request){
; 		_hw2000b_irq_request = 0;
; 		reg = hw2000b_read_reg(0x36);
; 		if ((reg & 0x2000) == 0){	//crc校验成功
; 			hw2000b_read_fifo(0x32, data, 1); //将接收数据放到_data中
; 			hw2000b_read_fifo(0x32, &data[1], data[0]); //将接收数据放到_data中
; 		} else {
; 			hw2000b_write_reg(0x3D, 0x0008); // 清INT0控制位
; 			return -1;
; 		}
; 		hw2000b_write_reg(0x3D, 0x0008); // 清INT0控制位
; 		//hw2000b_write_reg(0x21, 0x0000); //RX disable
; 		return 0;
; 	} else {
; 		return -1;
; 	}
; }
; /**************************************************************************
; * 函数名称：hw2000b_power_down
; * 功能描述：hw2000b进入power down
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void hw2000b_power_down(void)
; {
; 	uint16_t reg_value;
; 	
#line 528	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	hw2000b_write_reg(0x21, 0x0000); // TX RX disable
	CLR            	BKSR
;  528:(    PARA_1,         33 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x21
	SECTION        	0x1
	MOVA           	(_hw2000b_write_regDATA+0X0) & 0X7F		; Bank 1
;  528:(    PARA_2,          0 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x0
	MOVA           	(_hw2000b_write_regDATA+0X1) & 0X7F		; Bank 1
	MOVI           	0x0
	MOVA           	(_hw2000b_write_regDATA+0X1+0x1) & 0X7F		; Bank 1
;  528:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 529	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	reg_value = hw2000b_read_reg(0x23);
;  529:(    PARA_1,         35 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x23
	MOVAR          	_hw2000b_read_regDATA+0X0		; Bank 1
;  529:(     CALLR, (hw2000b_read_reg.0) ,            , reg_value)

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_read_reg
	CALL           	_hw2000b_read_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
	MOVAR          	_hw2000b_power_down_reg_value_87		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_hw2000b_power_down_reg_value_87+0x1		; Bank 1
#line 530	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	hw2000b_write_reg(0x23, 0x8080 | reg_value);	//0x23寄存器第【15】位置1
;  530:(    PARA_1,         35 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x23
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  530:(     BOR_2,      32896 ,  reg_value ,   #T21701)

; ITemplate_BOR1_4
	MOVRA          	_hw2000b_power_down_reg_value_87		; Bank 1
	IORI           	0x80
	MOVAR          	_hw2000b_power_down_#T21701_87		; Bank 1
	MOVRA          	_hw2000b_power_down_reg_value_87+0x1		; Bank 1
	IORI           	0x80
	MOVAR          	_hw2000b_power_down_#T21701_87+0x1		; Bank 1
;  530:(    PARA_2,    #T21701 ,            ,     value)

; ITemplate_ASGN1_4
	MOVRA          	_hw2000b_power_down_#T21701_87		; Bank 1
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVRA          	_hw2000b_power_down_#T21701_87+0x1		; Bank 1
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  530:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 532	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; }
;  532:(       RET,            ,            ,          )

; ITemplate_RET
	RET            			; Bank 0		; ShBank 0
	_DESC          	hw2000b_power_on,0X2,0X0,hw2000b_read_reg,hw2000b_write_reg,delay_ms,delay_us,hw2000b_init_250k

SECTION1hw2000b_power_on	UNINTIAL       	0		; Bank 0
	ORG            	0X85		; Bank 0
_hw2000b_power_onDATA	RSEG           	0X4		; Bank 0
hw2000b_power_on#	CSEG           
_hw2000b_power_on
; /**************************************************************************
; * 函数名称：hw2000b_power_on
; * 功能描述：hw2000b从power down唤醒
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void hw2000b_power_on(void)
; {
; 	uint16_t reg_value;
; 	
#line 548	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	reg_value = hw2000b_read_reg(0x23);
	CLR            	BKSR
;  548:(    PARA_1,         35 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x23
	SECTION        	0x1
	MOVA           	(_hw2000b_read_regDATA+0X0) & 0X7F		; Bank 1
;  548:(     CALLR, (hw2000b_read_reg.0) ,            , reg_value)

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_read_reg
	CALL           	_hw2000b_read_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
	MOVAR          	_hw2000b_power_on_reg_value_89		; Bank 1
	MOV            	(?_TMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVAR          	_hw2000b_power_on_reg_value_89+0x1		; Bank 1
#line 549	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	hw2000b_write_reg(0x23, 0x7F7F & reg_value);	//0x23寄存器第【15】位置0
;  549:(    PARA_1,         35 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x23
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  549:(    BAND_2,      32639 ,  reg_value ,   #T21726)

; ITemplate_BAND1_4
	MOVRA          	_hw2000b_power_on_reg_value_89		; Bank 1
	ANDI           	0x7f
	MOVAR          	_hw2000b_power_on_#T21726_89		; Bank 1
	MOVRA          	_hw2000b_power_on_reg_value_89+0x1		; Bank 1
	ANDI           	0x7f
	MOVAR          	_hw2000b_power_on_#T21726_89+0x1		; Bank 1
;  549:(    PARA_2,    #T21726 ,            ,     value)

; ITemplate_ASGN1_4
	MOVRA          	_hw2000b_power_on_#T21726_89		; Bank 1
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVRA          	_hw2000b_power_on_#T21726_89+0x1		; Bank 1
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  549:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 551	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	delay_ms(1);
;  551:(    PARA_2,          1 ,            ,        ms)

; ITemplate_ASGN1_4
	MOVI           	0x1
	MOVAR          	_delay_msDATA+0X0		; Bank 1
	MOVI           	0x0
	MOVAR          	_delay_msDATA+0X0+0x1		; Bank 1
;  551:(      CALL, (delay_ms.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_delay_ms
	CALL           	_delay_ms		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 553	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	hw2000b_write_reg(0x23, 0x431B); //Soft reset			//会增加功耗
;  553:(    PARA_1,         35 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x23
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  553:(    PARA_2,      17179 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x1b
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x43
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  553:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 554	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	hw2000b_write_reg(0x23, 0x031B); 	
;  554:(    PARA_1,         35 ,            ,      addr)

; ITemplate_ASGN1_4
	MOVI           	0x23
	MOVAR          	_hw2000b_write_regDATA+0X0		; Bank 1
;  554:(    PARA_2,        795 ,            ,     value)

; ITemplate_ASGN1_4
	MOVI           	0x1b
	MOVAR          	_hw2000b_write_regDATA+0X1		; Bank 1
	MOVI           	0x3
	MOVAR          	_hw2000b_write_regDATA+0X1+0x1		; Bank 1
;  554:(      CALL, (hw2000b_write_reg.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_write_reg
	CALL           	_hw2000b_write_reg		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 555	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	delay_us(20);
;  555:(    PARA_2,         20 ,            ,     delay)

; ITemplate_ASGN1_4
	MOVI           	0x14
	MOVAR          	_delay_usDATA+0X0		; Bank 1
	MOVI           	0x0
	MOVAR          	_delay_usDATA+0X0+0x1		; Bank 1
;  555:(      CALL, (delay_us.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_delay_us
	CALL           	_delay_us		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 556	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; 	hw2000b_init_250k();
;  556:(      CALL, (hw2000b_init_250k.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_init_250k
	CALL           	_hw2000b_init_250k		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 557	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\hw2000b.c ; }
;  557:(       RET,            ,            ,          )

; ITemplate_RET
	RET            			; Bank 0		; ShBank 0

SECTION0C__Program_Files__x86__HRCC_Tools_HRCC_v1_2_0_139_tools_INCLUDE_ES7P0693_h_STATIC0	UNINTIAL       		; Bank 0
_#T0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_hw2000b_c_STATIC1	PSECT	FLAG=0X1088,ADDR=0X7FD4F
_PB7_0	RSEG           	0X1		; Bank 0
	END

