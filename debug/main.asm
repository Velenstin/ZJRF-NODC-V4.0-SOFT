; Asm codes generated by Shanghai Haier C Compiler
; HRCO, Ver: 1.0,0137

#INCLUDE       	<ES7P0693.INC>
#INCLUDE       	<OPERATION.INC>
	PUBLIC         	_#T0
	EXTERN         	MUL_TEMP
	EXTERN         	MUL_TEMP
	EXTERN         	_memchr_c
	EXTERN         	_memchr_cDATA
	EXTERN         	_memchr
	EXTERN         	_memchrDATA
	EXTERN         	_memcmp_c
	EXTERN         	_memcmp_cDATA
	EXTERN         	_memcmp
	EXTERN         	_memcmpDATA
	EXTERN         	_memcpy_c
	EXTERN         	_memcpy_cDATA
	EXTERN         	_memcpy
	EXTERN         	_memcpyDATA
	EXTERN         	_memmove_c
	EXTERN         	_memmove_cDATA
	EXTERN         	_memmove
	EXTERN         	_memmoveDATA
	EXTERN         	_memset
	EXTERN         	_memsetDATA
	EXTERN         	_strcat_c
	EXTERN         	_strcat_cDATA
	EXTERN         	_strcat
	EXTERN         	_strcatDATA
	EXTERN         	_strchr_c
	EXTERN         	_strchr_cDATA
	EXTERN         	_strchr
	EXTERN         	_strchrDATA
	EXTERN         	_strcmp_c
	EXTERN         	_strcmp_cDATA
	EXTERN         	_strcmp
	EXTERN         	_strcmpDATA
	EXTERN         	_strcpy_c
	EXTERN         	_strcpy_cDATA
	EXTERN         	_strcpy
	EXTERN         	_strcpyDATA
	EXTERN         	_strichr_c
	EXTERN         	_strichr_cDATA
	EXTERN         	_strichr
	EXTERN         	_strichrDATA
	EXTERN         	_stricmp_c
	EXTERN         	_stricmp_cDATA
	EXTERN         	_stricmp
	EXTERN         	_stricmpDATA
	EXTERN         	_strlen_c
	EXTERN         	_strlen_cDATA
	EXTERN         	_strlen
	EXTERN         	_strlenDATA
	EXTERN         	_strncat_c
	EXTERN         	_strncat_cDATA
	EXTERN         	_strncat
	EXTERN         	_strncatDATA
	EXTERN         	_strncpy_c
	EXTERN         	_strncpy_cDATA
	EXTERN         	_strncpy
	EXTERN         	_strncpyDATA
	EXTERN         	_GPIOInit
	EXTERN         	_hw2000b_port_init
	EXTERN         	_hw2000b_init_1m
	EXTERN         	_hw2000b_init_250k
	EXTERN         	_hw2000b_set_osc_16M
	EXTERN         	_hw2000b_set_power_max
	EXTERN         	_hw2000b_set_power_5
	EXTERN         	_hw2000b_set_power_0
	EXTERN         	_hw2000b_set_power_negative_10
	EXTERN         	_hw2000b_set_power_negative_20
	EXTERN         	_hw2000b_set_frequence_2403
	EXTERN         	_hw2000b_set_frequence_2420
	EXTERN         	_hw2000b_set_frequence_2450
	EXTERN         	_hw2000b_set_frequence_2460
	EXTERN         	_hw2000b_set_frequence_2483
	EXTERN         	_hw2000b_power_test
	EXTERN         	_hw2000b_cancel_sw
	EXTERN         	_hw2000b_tx_data
	EXTERN         	_hw2000b_tx_dataDATA
	EXTERN         	_hw2000b_rx_enable
	EXTERN         	_hw2000b_rx_data
	EXTERN         	_hw2000b_rx_dataDATA
	EXTERN         	_hw2000b_power_down
	EXTERN         	_hw2000b_power_on
	EXTERN         	_delay_ms
	EXTERN         	_delay_msDATA
	EXTERN         	_delay_us
	EXTERN         	_delay_usDATA
	EXTERN         	_ram_clear
	EXTERN         	_mmemset
	EXTERN         	_mmemsetDATA
	EXTERN         	_mmemcpy
	EXTERN         	_mmemcpyDATA
	EXTERN         	_spi_init
	EXTERN         	_hw2000b_write_reg
	EXTERN         	_hw2000b_write_regDATA
	EXTERN         	_hw2000b_read_reg
	EXTERN         	_hw2000b_read_regDATA
	EXTERN         	_hw2000b_write_fifo
	EXTERN         	_hw2000b_write_fifoDATA
	EXTERN         	_hw2000b_read_fifo
	EXTERN         	_hw2000b_read_fifoDATA
	PUBLIC         	__ack_count
	PUBLIC         	__hw2000b_irq_request
	PUBLIC         	_rx_ok
	PUBLIC         	_sleep_flag
	PUBLIC         	_RX_OK_flag
	PUBLIC         	_rxbuf
	PUBLIC         	_timer_cnt
	PUBLIC         	_dataerr
	PUBLIC         	_CallFlashEn
	PUBLIC         	_FlashEwEn
	PUBLIC         	_StartIAP
	PUBLIC         	_DataFlashErsPage
	PUBLIC         	_DataFlashErsPageDATA
	PUBLIC         	_DataFlashRdData
	PUBLIC         	_DataFlashRdDataDATA
	PUBLIC         	_DataFlashWrData
	PUBLIC         	_DataFlashWrDataDATA
	PUBLIC         	_Delay_20us
	PUBLIC         	_Delay_20usDATA
	PUBLIC         	_sleep
	PUBLIC         	_WDT_Init
	PUBLIC         	_UART_Init
	PUBLIC         	_TIME_Init
	PUBLIC         	_main
	PUBLIC         	_isr
_main_#T21296_87	EQU            	_mainDATA + 0X0		; Bank 0
_isr_#T21332_92	EQU            	_isrDATA + 0X0		; Bank 0
_isr_#T21339_92	EQU            	_isrDATA + 0X0		; Bank 0
_isr_#T21356_92	EQU            	_isrDATA + 0X0		; Bank 0
_isr_#T21363_92	EQU            	_isrDATA + 0X0		; Bank 0
_isr_#T21433_92	EQU            	_isrDATA + 0X0		; Bank 0
_isr_#T21440_92	EQU            	_isrDATA + 0X0		; Bank 0
_isr_#T21479_97	EQU            	_isrDATA + 0X0		; Bank 0
_isr_#T21480_97	EQU            	_isrDATA + 0X2		; Bank 0
_isr_#T21513_97	EQU            	_isrDATA + 0X0		; Bank 0
#TMP	EQU            	?_TMP+ 0X0		; Bank 0
?_TMP_RET	EQU            	?_TMP		; Bank 0
_RX0TXEN_0#sh	EQU            	0X684		; Bank 0
_RX0LEN_0#sh	EQU            	0X686		; Bank 0
_RX0EN_0#sh	EQU            	0X687		; Bank 0
_BRGH0_0#sh	EQU            	0X695		; Bank 0
_TX0LEN_0#sh	EQU            	0X696		; Bank 0
_RX0B_0#sh	EQU            	0XCF		; Bank 0
_BR0R_0#sh	EQU            	0XD3		; Bank 0
_MULA_0#sh	EQU            	(MULA - 0X6080) % 0X40 + 0xC0		; Bank 0
_MULB_0#sh	EQU            	(MULB - 0X6080) % 0X40 + 0xC0		; Bank 0
_MULL_0#sh	EQU            	(MULL - 0X6080) % 0X40 + 0xC0		; Bank 0
_MULH_0#sh	EQU            	(MULH - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVEL_0#sh	EQU            	(DIVEL - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVEM_0#sh	EQU            	(DIVEM - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVSL_0#sh	EQU            	(DIVSL - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVSH_0#sh	EQU            	(DIVSH - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVQL_0#sh	EQU            	(DIVQL - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVQM_0#sh	EQU            	(DIVQM - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVRL_0#sh	EQU            	(DIVRL - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVRH_0#sh	EQU            	(DIVRH - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVC_0#sh	EQU            	(DIVC - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVEU_0#sh	EQU            	(DIVEU - 0X6080) % 0X40 + 0xC0		; Bank 0
_DIVEH_0#sh	EQU            	(DIVEH - 0X6080) % 0X40 + 0xC0		; Bank 0
_FRAH_0#sh	EQU            	(FRAH - 0X6080) % 0X40 + 0xC0		; Bank 0
_FRAL_0#sh	EQU            	(FRAL - 0X6080) % 0X40 + 0xC0		; Bank 0
	_DESC          	sleep,0X0,0X0
sleep#	CSEG           
_sleep
; /**************************************************************************
; * 版权声明：Copyright@2019 上海东软载波微电子有限公司
; * 文件名称：main.c
; * 功能描述：	
; * 函数列表：
; * 文件作者：Ljj  
; * 文件版本： 
; * 完成日期：2023-08-23	
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; #include <hic.h>
; #include "string.h" 
; #include "io.h"
; #include "hw2000b.h"
; #include "timer.h"
; #include "ram.h"
; #include "spi.h"
; #define CLRWDT()   {__Asm CWDT;}        //宏定义清狗指令
; uint16_t	_ack_count;
; sbit		_hw2000b_irq_request;	//射频中断标志
; sbit		rx_ok;
; uint8_t sleep_flag = 0;
; uint8_t RX_OK_flag = 0;
; uint8_t rxbuf[40];
; uint8_t timer_cnt;
; #define STARTADDR    0xC000     //宏定义数据区IAP操作起始地址
; #define ENDADDR      0xC002     //宏定义数据区IAP操作结束地址
; #define WRDATA       0x87654321     //宏定义待写入数据
; #define DATA_1_ADDR	0xC000
; #define DATA_2_ADDR	0xC001
; #define DATA_3_ADDR	0xC002
; uint8_t dataerr = 0;      //0：写入与读出相等，1：写入与读出不等
; uint8_t CallFlashEn,FlashEwEn;//软件锁变量
; static volatile unsigned int section8 FRAN @ 0xFF8E;
; static volatile unsigned int section8 FRA  @ 0xFF90;
; /******************************************************
; 函数名：void StartIAP(void)
; 描  述：开始IAP操作。注意：IAP固定操作格式，使用时不可改变
; 输入值：无
; 输出值：无
; 返回值：无
; *******************************************************/
; void StartIAP(void)
; {
;     __asm{
;           MOVI 0x55
;           MOVA ROMCH
;           MOVI 0xFF     //8个NOP代替语句开始
;           SECSEL &FlashEwEn& % 0x80//选择变量所在的section
;           XOR &FlashEwEn& % 0x80,0//0xFF xor 0xAA = 0x55
;           SECSEL &CallFlashEn& % 0x80//选择变量所在的section
;           XOR &CallFlashEn& % 0x80,0//若CallFlashEn在调用函数前为0x55，0x55 xor 0x55 = 0x00
;           JBS PSW,Z//如果运算结果为0x00，则执行正确，跳至下一个NOP
;           GOTO $+3
;           NOP//8个NOP代替语句结束
;           MOVI 0xAA
;           MOVA ROMCH
;           MOVI 0xFF     //8个NOP代替语句开始
;           SECSEL &FlashEwEn& % 0x80//选择变量所在的section
;           XOR &FlashEwEn& % 0x80,0//0xFF xor 0xAA = 0x55
;           SECSEL &CallFlashEn& % 0x80//选择变量所在的section
;           XOR &CallFlashEn& % 0x80,0//若CallFlashEn在调用函数前为0x55，0x55 xor 0x55 = 0x00
;           JBS PSW,Z//如果运算结果为0x00，则执行正确，跳至下一个NOP
;           GOTO $+3
;           NOP//8个NOP代替语句结束
;           BSS ROMCL,WR     //触发编程操作
;           JBC ROMCL,WR
;           goto $-1         //等待操作结束
;         }
; }
; /*******************************************************
; 函数名：void DataFlashErsPage(void)
; 描  述：擦除DataFlash整页(256 word)，地址范围：0xC000~0xC1FF
; 输入值：DataFlash地址addr，DataFlash取反地址addri
; 输出值：无
; 返回值：无
; *******************************************************/
; void DataFlashErsPage(unsigned int addr, unsigned int addri)
; {
; 	unsigned char gie_bk = GIE;		//备份GIE
;     CLRWDT();
; 	while(GIE == 1)GIE = 0;            //启动IAP前关闭全局中断
; 	FlashEwEn = 0xAA;//设置软件锁变量
;     FPEE = 1;           //存储器擦除模式
;     FRAH = addr>>8;
;     FRAL = addr;
;     FRAHN = addri>>8;      //IAP擦除/编程必须满足地址取反逻辑
;     FRALN = addri;     
;     WREN = 1;           //使能擦除/编程功能
;     StartIAP();         //开始IAP操作
; 	CallFlashEn = 0;//清零软件锁变量
; 	FlashEwEn = 0;
;     ROMCL = 0x00;       //退出IAP
; 	FRA = 0xFF12;//指到不用的地址空间
; 	FRAN = 0x3456;//此处把地址反码赋成与0xFFFF和FRA无取反关系的值
; 	GIE = gie_bk;       //恢复全局中断
; }
; /*******************************************************
; 函数名：unsigned long DataFlashRdData(unsigned int addr)
; 描  述：读Flash指定地址的数据
; 输入值：DataFlash地址addr，地址范围：0xC000~0xC1FF
; 输出值：无
; 返回值：DataFlash指定地址的数据
; *******************************************************/
; unsigned long DataFlashRdData(unsigned int addr)
; {
; 	unsigned long data;
; 	unsigned char gie_bk = GIE;	  //备份GIE
;     CLRWDT();
; 	while(GIE == 1)GIE = 0;
;     FRAL = addr;
;     FRAH = addr>>8;
; 	DATARDTRG=1;
; 	while(DATARDTRG);
; 	DATARDEN=1;         //DATA区读出使能
;     __Asm TBR;          //查表读指令
;     data = ((unsigned long)ROMD1H<<24) | ((unsigned long)ROMD1L<<16) | ((unsigned long)ROMDH<<8) | ROMDL;
; 	DATARDEN=0;         //DATA区读出禁止
;     GIE = gie_bk;       //恢复全局中断
; 	return data;
; }
; /*******************************************************
; 函数名：void DataFlashWrData(unsigned int addr, unsigned long word)
; 描  述：写DataFlash指定地址的数据，地址范围：0xC000~0xC1FF
; 输入值：DataFlash地址addr，DataFlash取反地址addri，待写的数据word
; 输出值：无
; 返回值：0:写入失败，1:写入成功
; *******************************************************/
; unsigned char DataFlashWrData(unsigned int addr, unsigned int addri, unsigned long word)
; {
;     unsigned char rmdh,rmdl,rmd1h,rmd1l;      //临时存放ROMDH、ROMDL值
; 	unsigned char gie_bk = GIE;	  //备份GIE
;     CLRWDT();
; 	while(GIE == 1)GIE = 0;            //启动IAP前关闭全局中断
; 	FlashEwEn = 0xAA;//设置软件锁变量
;     FPEE = 0;           //存储器编程模式
;     ROMD1H = word>>24;    //写Word
;     ROMD1L = word>>16;
;     ROMDH = word>>8;
;     ROMDL = word;
;     FRAH = addr>>8;     //IAP编程地址
;     FRAL = addr;
;     FRAHN = addri>>8;      //IAP擦除/编程必须满足地址取反逻辑
;     FRALN = addri;       
;     WREN = 1;           //使能编程
;     StartIAP();         //开始IAP操作
; 	CallFlashEn = 0;//清零软件锁变量
; 	FlashEwEn = 0;
;     rmdh = ROMDH++;
;     rmdl = ROMDL++;
;     rmd1h = ROMD1H++;
;     rmd1l = ROMD1L++;
; 	DATARDEN=1;      //DATA区读出使能
;     FRAH = addr>>8;
;     FRAL = addr;
; 	DATARDTRG=1;     //DATA区读出触发
; 	while(DATARDTRG);
;     __Asm TBR;          //查表读指令
;     if (ROMDH!=rmdh || ROMDL!=rmdl || ROMD1H!=rmd1h || ROMD1L!=rmd1l)
; 	{
;         ROMCL = 0x00;       //退出IAP
; 		return 0;
; 	}
; 	FRA = 0xFF12;//指到不用的地址空间
; 	FRAN = 0x3456;//此处把地址反码赋成与0xFFFF和FRA无取反关系的值
; 	ROMDH = 0xFF;//数据初始化为0xFF
; 	ROMDL = 0xFF;//数据初始化为0xFF
; 	ROMD1H = 0xFF;//数据初始化为0xFF
; 	ROMD1L = 0xFF;//数据初始化为0xFF
;     ROMCL = 0x00;       //退出IAP
; 	DATARDEN=0;   //DATA区读出禁止
; 	GIE = gie_bk;       //恢复全局中断
;     return 1;
; }
; void Delay_20us(unsigned int a)
; {
; 	uint16_t i;
; 	for(;a>0;a--)
; 	{
;         for(i = 0;i<10;i++);
; 	}
; }
; /**********************************************
; 函数名：void sleep(void)
; 描  述：进入IDLE模式
; 输入值：无
; 输出值：无
; 返回值：无
; **********************************************/
; void sleep(void)
; {
#line 215	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	T8NEN = 0;				//禁能T8N
	CLR            	BKSR
;  215:(    ASGN_0,          0 ,            ,     T8NEN)

; ITemplate_CLR_0_TMP
	BCC            	(_T8NEN_0)/8,	(_T8NEN_0)%8
#line 216	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     RX0EN = 0;				//禁能串口接收
;  216:(    ASGN_0,          0 ,            ,     RX0EN)

; ITemplate_CLR_0_TMP
	BSS            	BKSR,	0x4
	BCC            	(_RX0EN_0#sh)/8,	(_RX0EN_0#sh)%8		; ShBank 1
#line 218	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	INTC0 = 0xFF;			//PINT0-双沿中断
;  218:(    ASGN_1,        255 ,            ,     INTC0)

; ITemplate_ASGN1_4_R
	MOVI           	0xff
	MOVA           	_INTC0_0
#line 219	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	PIE0 = 1;				//打开PINT0管脚中断
;  219:(    ASGN_0,          1 ,            ,      PIE0)

; ITemplate_SET_0_TMP
	BSS            	(_PIE0_0)/8,	(_PIE0_0)%8
#line 220	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     PIF0 = 0;				//睡眠前清中断标志位
;  220:(    ASGN_0,          0 ,            ,      PIF0)

; ITemplate_CLR_0_TMP
	BCC            	(_PIF0_0)/8,	(_PIF0_0)%8
#line 222	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	KMSK4 = 0;				//KINT4屏蔽
;  222:(    ASGN_0,          0 ,            ,     KMSK4)

; ITemplate_CLR_0_TMP
	BCC            	(_KMSK4_0)/8,	(_KMSK4_0)%8
#line 223	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	INTF0 = 0x00;			//清除中断标志
;  223:(    ASGN_1,          0 ,            ,     INTF0)

; ITemplate_CLR1_4_TMP
	CLR            	_INTF0_0
#line 224	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	INTE0 = 0x00;			//禁能KIE
;  224:(    ASGN_1,          0 ,            ,     INTE0)

; ITemplate_CLR1_4_TMP
	CLR            	_INTE0_0
#line 226	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	GIE = 0;				//关闭总中断
;  226:(    ASGN_0,          0 ,            ,       GIE)

; ITemplate_CLR_0_TMP
	BCC            	(_GIE_0)/8,	(_GIE_0)%8
; 							
#line 229	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	PWEN &= 0xFD;			//禁止IDLE状态下计数
;  229:(   ASGN_B$,          0 ,          1 ,      PWEN)

; ITemplate_CLR_B1_TMP
	BCC            	_PWEN_0,	0x1
#line 230	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	WKDC = 0x1F;
;  230:(    ASGN_1,         31 ,            ,      WKDC)

; ITemplate_ASGN1_4_R
	MOVI           	0x1f
	MOVA           	_WKDC_0
#line 231	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	PWRC = 0x8F;			//选择IDLE模式
;  231:(    ASGN_1,        143 ,            ,      PWRC)

; ITemplate_ASGN1_4_R
	MOVI           	0x8f
	MOVA           	_PWRC_0
#line 232	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     __Asm IDLE;				//进入IDLE模式
; ITemplate_LABEL
;-----------Embedded Asm--------------
	IDLE
;-------------------------------------
#line 234	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	GIE = 1;				//打开总中断
;  234:(    ASGN_0,          1 ,            ,       GIE)

; ITemplate_SET_0_TMP
	BSS            	(_GIE_0)/8,	(_GIE_0)%8
#line 236	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	KMSK4 = 1;				//KINT4取消屏蔽
;  236:(    ASGN_0,          1 ,            ,     KMSK4)

; ITemplate_SET_0_TMP
	BSS            	(_KMSK4_0)/8,	(_KMSK4_0)%8
#line 237	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	INTF0 = 0x00;			//清除中断标志
;  237:(    ASGN_1,          0 ,            ,     INTF0)

; ITemplate_CLR1_4_TMP
	CLR            	_INTF0_0
#line 238	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	INTE0 |= 0x10;			//使能KIE
;  238:(   ASGN_B$,          1 ,          4 ,     INTE0)

; ITemplate_SET_B1_TMP
	BSS            	_INTE0_0,	0x4
#line 240	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	INTC0 = 0xFF;			//PINT0-双沿中断
;  240:(    ASGN_1,        255 ,            ,     INTC0)

; ITemplate_ASGN1_4_R
	MOVI           	0xff
	MOVA           	_INTC0_0
#line 241	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	PIE0 = 0;				//关闭PINT0管脚中断
;  241:(    ASGN_0,          0 ,            ,      PIE0)

; ITemplate_CLR_0_TMP
	BCC            	(_PIE0_0)/8,	(_PIE0_0)%8
#line 242	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     PIF0 = 0;				//睡眠前清中断标志位
;  242:(    ASGN_0,          0 ,            ,      PIF0)

; ITemplate_CLR_0_TMP
	BCC            	(_PIF0_0)/8,	(_PIF0_0)%8
#line 244	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	T8NIE = 1;				//打开定时器溢出中断
;  244:(    ASGN_0,          1 ,            ,     T8NIE)

; ITemplate_SET_0_TMP
	BSS            	(_T8NIE_0)/8,	(_T8NIE_0)%8
#line 245	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	T8NIF = 0;				//清标志位
;  245:(    ASGN_0,          0 ,            ,     T8NIF)

; ITemplate_CLR_0_TMP
	BCC            	(_T8NIF_0)/8,	(_T8NIF_0)%8
#line 246	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	T8N = 131;				//赋计数器初值   2ms
;  246:(    ASGN_1,        131 ,            ,       T8N)

; ITemplate_ASGN1_4_R
	MOVI           	0x83
	MOVA           	_T8N_0
#line 247	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	T8NEN = 1;				//使能T8N
;  247:(    ASGN_0,          1 ,            ,     T8NEN)

; ITemplate_SET_0_TMP
	BSS            	(_T8NEN_0)/8,	(_T8NEN_0)%8
#line 249	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	timer_cnt = 250;
;  249:(    ASGN_1,        250 ,            , timer_cnt)

; ITemplate_ASGN1_4_R
	MOVI           	0xfa
	SECTION        	0x1
	MOVA           	(_timer_cnt) & 0X7F		; Bank 1
#line 251	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	RX0EN = 1;			//使能串口接收
;  251:(    ASGN_0,          1 ,            ,     RX0EN)

; ITemplate_SET_0_TMP
	BSS            	(_RX0EN_0#sh)/8,	(_RX0EN_0#sh)%8		; ShBank 1
#line 252	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; }
;  252:(       RET,            ,            ,          )

; ITemplate_RET
	SECTION        	0x0
	BCC            	BKSR,	0x4
	RET            			; Bank 0		; ShBank 0
	_DESC          	WDT_Init,0X0,0X0
WDT_Init#	CSEG           
_WDT_Init
; void WDT_Init(void)
; {
#line 257	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     WDTC = 0x16;         //分频比1:128，使能WDT预分频器，看门狗溢出时间t=256*128/32000=1.024s
	CLR            	BKSR
;  257:(    ASGN_1,         22 ,            ,      WDTC)

; ITemplate_ASGN1_4_R
	MOVI           	0x16
	MOVA           	_WDTC_0
#line 258	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     PWEN &= 0xFD;
;  258:(   ASGN_B$,          0 ,          1 ,      PWEN)

; ITemplate_CLR_B1_TMP
	BCC            	_PWEN_0,	0x1
;     PWEN |= 0<<1;		//禁止IDLE状态下计数
#line 260	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; }
;  260:(       RET,            ,            ,          )

; ITemplate_RET
	RET            			; Bank 0		; ShBank 0
	_DESC          	UART_Init,0X0,0X0
UART_Init#	CSEG           
_UART_Init
; void UART_Init(void)
; {
#line 264	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     RX0LEN = 0;     //8位数据接收格式
	CLR            	BKSR
;  264:(    ASGN_0,          0 ,            ,    RX0LEN)

; ITemplate_CLR_0_TMP
	BSS            	BKSR,	0x4
	BCC            	(_RX0LEN_0#sh)/8,	(_RX0LEN_0#sh)%8		; ShBank 1
#line 265	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     TX0LEN = 0;     //8位数据发送格式
;  265:(    ASGN_0,          0 ,            ,    TX0LEN)

; ITemplate_CLR_0_TMP
	BCC            	(_TX0LEN_0#sh)/8,	(_TX0LEN_0#sh)%8		; ShBank 1
; 	//BJT0EN = 1;		//波特率去抖使能
;     //BRGH0 = 0;      //波特率低速模式：波特率=Fosc/(64*BRRDIV))
;     //BR0R = 0xD0;    //波特率整数部分=16MHz/(64*1200bps)=208.3333
; 	//BR0FRA = 0x05;	//波特率小数部分=16*0.3333 ≈ 5
;     //BRGH0 = 0;      //波特率低速模式：波特率=Fosc/(64*(BRR<7:0>+1))
;     //BR0R = 0x19;    //波特率=16MHz/(64*(25+1))≈9600bps
#line 274	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     BRGH0 = 0;      //波特率低速模式：波特率=Fosc/(64*(BRR<7:0>+1))
;  274:(    ASGN_0,          0 ,            ,     BRGH0)

; ITemplate_CLR_0_TMP
	BCC            	(_BRGH0_0#sh)/8,	(_BRGH0_0#sh)%8		; ShBank 1
#line 275	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     BR0R = 0x33;    //波特率=16MHz/(64*(51+1))≈4800bps
;  275:(    ASGN_1,         51 ,            ,      BR0R)

; ITemplate_ASGN1_4_R
	MOVI           	0x33
	MOVA           	_BR0R_0#sh		; ShBank 1
#line 277	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	RX0TXEN = 1;		//串口管脚交互，RX0=0 ,TX0=1
;  277:(    ASGN_0,          1 ,            ,   RX0TXEN)

; ITemplate_SET_0_TMP
	BSS            	(_RX0TXEN_0#sh)/8,	(_RX0TXEN_0#sh)%8		; ShBank 1
#line 279	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	RX0IE = 1;			//接收中断
;  279:(    ASGN_0,          1 ,            ,     RX0IE)

; ITemplate_SET_0_TMP
	BSS            	(_RX0IE_0)/8,	(_RX0IE_0)%8
; 	//RX0EN = 1;          //打开串口接收
#line 281	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; }
;  281:(       RET,            ,            ,          )

; ITemplate_RET
	BCC            	BKSR,	0x4
	RET            			; Bank 0		; ShBank 0
	_DESC          	TIME_Init,0X0,0X0
TIME_Init#	CSEG           
_TIME_Init
; void TIME_Init(void)
; {
#line 285	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     T8NC = 0x0E;         //定时器模式，预分频1:(Fosc/2)/128
	CLR            	BKSR
;  285:(    ASGN_1,         14 ,            ,      T8NC)

; ITemplate_ASGN1_4_R
	MOVI           	0xe
	MOVA           	_T8NC_0
#line 286	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     T8N = 131;           //赋计数器初值   2ms
;  286:(    ASGN_1,        131 ,            ,       T8N)

; ITemplate_ASGN1_4_R
	MOVI           	0x83
	MOVA           	_T8N_0
#line 287	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     T8NIE = 1;           //打开定时器溢出中断
;  287:(    ASGN_0,          1 ,            ,     T8NIE)

; ITemplate_SET_0_TMP
	BSS            	(_T8NIE_0)/8,	(_T8NIE_0)%8
#line 288	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     T8NIF = 0;           //清溢出标志位
;  288:(    ASGN_0,          0 ,            ,     T8NIF)

; ITemplate_CLR_0_TMP
	BCC            	(_T8NIF_0)/8,	(_T8NIF_0)%8
#line 290	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     T8NEN = 1;           //使能T8N
;  290:(    ASGN_0,          1 ,            ,     T8NEN)

; ITemplate_SET_0_TMP
	BSS            	(_T8NEN_0)/8,	(_T8NEN_0)%8
#line 292	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	timer_cnt = 250;	 //
;  292:(    ASGN_1,        250 ,            , timer_cnt)

; ITemplate_ASGN1_4_R
	MOVI           	0xfa
	SECTION        	0x1
	MOVA           	(_timer_cnt) & 0X7F		; Bank 1
#line 293	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; }
;  293:(       RET,            ,            ,          )

; ITemplate_RET
	SECTION        	0x0
	RET            			; Bank 0		; ShBank 0
	_DESC          	main,0X0,0X0,GPIOInit,WDT_Init,UART_Init,TIME_Init,spi_init,hw2000b_port_init,hw2000b_init_250k,hw2000b_power_down,sleep,hw2000b_power_on,hw2000b_tx_data

SECTION1main	UNINTIAL       	0		; Bank 0
	ORG            	0X83		; Bank 0
_mainDATA	RSEG           	0X2		; Bank 0
main#	CSEG           
_main
; /**************************************************************************
; * 函数名称：main
; * 功能描述：工程入口
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void main(void) 
; {
#line 308	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     GPIOInit();										//初始化GPIO
	CLR            	BKSR
;  308:(      CALL, (GPIOInit.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_GPIOInit
	CALL           	_GPIOInit		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 309	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	WDT_Init();										//初始化看门狗
;  309:(      CALL, (WDT_Init.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_WDT_Init
	CALL           	_WDT_Init		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 310	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	UART_Init();									//初始化串口
;  310:(      CALL, (UART_Init.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_UART_Init
	CALL           	_UART_Init		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 311	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	TIME_Init();									//初始化定时器
;  311:(      CALL, (TIME_Init.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_TIME_Init
	CALL           	_TIME_Init		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 313	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	rxbuf[0] = 0;									//清串口计数值
;  313:(    ASGN_1,          0 ,            ,*(rxbuf.0))

; ITemplate_ASGN1_4
	MOVI           	0x0
	MOVAR          	_rxbuf		; Bank 1
#line 314	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	RX_OK_flag = 0;									//清串口接收完成标志
;  314:(    ASGN_1,          0 ,            ,RX_OK_flag)

; ITemplate_CLR1_4_TMP
	SECTION        	0x1
	CLR            	(_RX_OK_flag) & 0X7F		; Bank 1
#line 315	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	sleep_flag = 1;									//上电休眠
;  315:(    ASGN_1,          1 ,            ,sleep_flag)

; ITemplate_ASGN1_4_R
	MOVI           	0x1
	MOVA           	(_sleep_flag) & 0X7F		; Bank 1
#line 317	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	spi_init();										//初始化SPI端口
;  317:(      CALL, (spi_init.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_spi_init
	CALL           	_spi_init		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 319	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	hw2000b_port_init();							//初始化射频端口
;  319:(      CALL, (hw2000b_port_init.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_port_init
	CALL           	_hw2000b_port_init		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 320	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	hw2000b_init_250k();							//初始化射频参数
;  320:(      CALL, (hw2000b_init_250k.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_init_250k
	CALL           	_hw2000b_init_250k		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 321	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	hw2000b_power_down();							//关闭射频模块
;  321:(      CALL, (hw2000b_power_down.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_power_down
	CALL           	_hw2000b_power_down		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 323	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	GIE = 1;										//全局中断使能
;  323:(    ASGN_0,          1 ,            ,       GIE)

; ITemplate_SET_0_TMP
	BSS            	(_GIE_0)/8,	(_GIE_0)%8
#line 325	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	while(1) 
;  325:(     LABEL,    #L21244 ,            ,          )

; ITemplate_LABEL
#L21244
; 	{
#line 327	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 		if(sleep_flag)							//睡眠标志位判断
;  327:(      JZ_1, sleep_flag ,            ,   #L21249)

; ITemplate_JZ1_4
	SECTION        	0x1
	MOV            	(_sleep_flag) & 0X7F,	0x0		; Bank 1
	JBC            	PSW,	0x2
	GOTO           	#L21249
; 		{
#line 329	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 			sleep();							//进入睡眠函数
;  329:(      CALL,  (sleep.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_sleep
	CALL           	_sleep		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 330	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 			sleep_flag = 0;						//清睡眠标志位
;  330:(    ASGN_1,          0 ,            ,sleep_flag)

; ITemplate_CLR1_4_TMP
	SECTION        	0x1
	CLR            	(_sleep_flag) & 0X7F		; Bank 1
#line 331	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 		}
;  331:(     LABEL,    #L21249 ,            ,          )

; ITemplate_LABEL
#L21249
#line 333	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 		if (RX_OK_flag)							//串口接收完成标志位判断
;  333:(      JZ_1, RX_OK_flag ,            ,   #L21262)

; ITemplate_JZ1_4
	MOV            	(_RX_OK_flag) & 0X7F,	0x0		; Bank 1
	JBC            	PSW,	0x2
	GOTO           	#L21262
; 		{
#line 335	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 			RX_OK_flag = 0;						//清接收完成标志位
;  335:(    ASGN_1,          0 ,            ,RX_OK_flag)

; ITemplate_CLR1_4_TMP
	CLR            	(_RX_OK_flag) & 0X7F		; Bank 1
#line 336	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 			CLRWDT();
; ITemplate_LABEL
;-----------Embedded Asm--------------
	CWDT
;-------------------------------------
#line 338	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 			hw2000b_power_on();					//打开射频模块
;  338:(      CALL, (hw2000b_power_on.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_power_on
	CALL           	_hw2000b_power_on		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 339	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 			hw2000b_tx_data(rxbuf, rxbuf[0] + 1);	//发送串口数据
;  339:(    PARA_2,  (rxbuf.0) ,            ,       buf)

; ITemplate_ASGN1_4
	MOVI           	_rxbuf
	MOVAR          	_hw2000b_tx_dataDATA+0X0		; Bank 1
	MOVI           	HIGH(_rxbuf)
	MOVAR          	_hw2000b_tx_dataDATA+0X0+0x1		; Bank 1
;  339:(     ADD_1, *(rxbuf.0) ,          1 ,      size)

; ITemplate_ADD1_4
	MOVRA          	_rxbuf		; Bank 1
	ADDI           	0x1
	MOVAR          	_hw2000b_tx_dataDATA+0X2		; Bank 1
; ITemplate_Add_Ext_U
	SECTION        	0x1
	CLR            	(_hw2000b_tx_dataDATA+0X2+0x1) & 0X7F		; Bank 1
	RL             	(_hw2000b_tx_dataDATA+0X2+0x1) & 0X7F,	0x1		; Bank 1
;  339:(      CALL, (hw2000b_tx_data.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_tx_data
	CALL           	_hw2000b_tx_data		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 340	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 			hw2000b_power_down();				//关闭射频模块
;  340:(      CALL, (hw2000b_power_down.0) ,            ,          )

; ITemplate_CALL
	SEGMENTSEL     	_hw2000b_power_down
	CALL           	_hw2000b_power_down		; Bank 0		; ShBank 0
	SEGMENTSEL     	$
#line 341	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 			CLRWDT();
; ITemplate_LABEL
;-----------Embedded Asm--------------
	CWDT
;-------------------------------------
#line 343	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 			rxbuf[0] = 0;						//清除计数值
;  343:(    ASGN_1,          0 ,            ,*(rxbuf.0))

; ITemplate_ASGN1_4
	MOVI           	0x0
	MOVAR          	_rxbuf		; Bank 1
#line 345	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 			sleep_flag = 1;						//置睡眠标志位
;  345:(    ASGN_1,          1 ,            ,sleep_flag)

; ITemplate_ASGN1_4_R
	MOVI           	0x1
	MOVAR          	_sleep_flag		; Bank 1
#line 346	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 		}
;  346:(     LABEL,    #L21262 ,            ,          )

; ITemplate_LABEL
#L21262
#line 348	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;         CLRWDT();								//清看门狗
; ITemplate_LABEL
;-----------Embedded Asm--------------
	CWDT
;-------------------------------------
#line 349	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	}
;  349:(       JMP,            ,            ,   #L21244)

; ITemplate_JMP
	GOTO           	#L21244
	_DESC          	##isr,0X0,0X0

SECTION1isr	UNINTIAL       	0		; Bank 0
	ORG            	0X91		; Bank 0
_isrDATA	RSEG           	0X4		; Bank 0
; interrupt fun entry
	PUBLIC         	SAVED_TMP
SECTION0_INT_SAVED_00	UNINTIAL       		; Bank 0
SAVED_FSR	RSEG           	0x3
SECTION0_INT_SAVED_3	UNINTIAL       		; Bank 0
SAVED_TMP	RSEG           	0x1
INT_ENTRY	CSEG           	0x04
; ITemplate_InterruptPackedConstHead
_INT_ENTRY
	PUSH           	
	CLR            	PCRH
	CLR            	BKSR
	MOV            	IAAL,	0x0
	MOVA           	(SAVED_FSR) & 0X7F		; Bank 0
	MOV            	IAAH,	0x0
	MOVA           	(SAVED_FSR+0x1) & 0X7F		; Bank 0
	MOV            	(CSEG_PTR) & 0X7F,	0x0		; Bank 0
	MOVA           	(CSEG_PTR+0x2) & 0X7F		; Bank 0
	MOV            	(CSEG_PTR+0x1) & 0X7F,	0x0		; Bank 0
	MOVA           	(CSEG_PTR+0x3) & 0X7F		; Bank 0
	MOV            	FRAL,	0x0
	MOVA           	(CSEG_PTR+0x4) & 0X7F		; Bank 0
	MOV            	FRAH,	0x0
	MOVA           	(CSEG_PTR+0x5) & 0X7F		; Bank 0
	MOV            	(MUL_TEMP) & 0X7F,	0x0		; Bank 0
	MOVA           	(MUL_TEMP+0x2) & 0X7F		; Bank 0
	MOV            	(MUL_TEMP+0x1) & 0X7F,	0x0		; Bank 0
	MOVA           	(MUL_TEMP+0x3) & 0X7F		; Bank 0
isr#	CSEG           
_isr
; }
; /**************************************************************************
; * 函数名称：isr
; * 功能描述：中断入口函数
; * 输入参数：无
; * 返回参数：无
; * 函数作者：
; * 完成日期：
; * 修订历史：
; * 修订日期：
; **************************************************************************/
; void isr(void) interrupt
; {
; 	uint8_t y;
#line 367	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     if(PIE0==1 && PIF0==1)
;  367:(    CVB_SC,       PIE0 ,            ,   #T21332)

; ITemplate_CVB_UC
	MOVI           	0x0
	JBC            	(_PIE0_0)/8,	(_PIE0_0)%8
	MOVI           	0x1
	SECTION        	0x1
	MOVA           	(_isr_#T21332_92) & 0X7F		; Bank 1
;  367:(    JNEQ_1,          1 ,    #T21332 ,   #L21326)

; ITemplate_JNEQ1_4
	MOV            	(_isr_#T21332_92) & 0X7F,	0x0		; Bank 1
	XORI           	0x1
	JBS            	PSW,	0x2
	GOTO           	#L21326
;  367:(    CVB_SC,       PIF0 ,            ,   #T21339)

; ITemplate_CVB_UC
	MOVI           	0x0
	JBC            	(_PIF0_0)/8,	(_PIF0_0)%8
	MOVI           	0x1
	MOVA           	(_isr_#T21339_92) & 0X7F		; Bank 1
;  367:(    JNEQ_1,          1 ,    #T21339 ,   #L21326)

; ITemplate_JNEQ1_4
	MOV            	(_isr_#T21339_92) & 0X7F,	0x0		; Bank 1
	XORI           	0x1
	JBS            	PSW,	0x2
	GOTO           	#L21326
;     {
#line 369	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;         PIF0 = 0;					//清除外部中断
;  369:(    ASGN_0,          0 ,            ,      PIF0)

; ITemplate_CLR_0_TMP
	BCC            	(_PIF0_0)/8,	(_PIF0_0)%8
#line 370	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     }
;  370:(     LABEL,    #L21326 ,            ,          )

; ITemplate_LABEL
#L21326
#line 372	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     if (T8NIE==1 && T8NIF==1)       //定时器2ms溢出中断
;  372:(    CVB_SC,      T8NIE ,            ,   #T21356)

; ITemplate_CVB_UC
	MOVI           	0x0
	JBC            	(_T8NIE_0)/8,	(_T8NIE_0)%8
	MOVI           	0x1
	MOVA           	(_isr_#T21356_92) & 0X7F		; Bank 1
;  372:(    JNEQ_1,          1 ,    #T21356 ,   #L21350)

; ITemplate_JNEQ1_4
	MOV            	(_isr_#T21356_92) & 0X7F,	0x0		; Bank 1
	XORI           	0x1
	JBS            	PSW,	0x2
	GOTO           	#L21350
;  372:(    CVB_SC,      T8NIF ,            ,   #T21363)

; ITemplate_CVB_UC
	MOVI           	0x0
	JBC            	(_T8NIF_0)/8,	(_T8NIF_0)%8
	MOVI           	0x1
	MOVA           	(_isr_#T21363_92) & 0X7F		; Bank 1
;  372:(    JNEQ_1,          1 ,    #T21363 ,   #L21350)

; ITemplate_JNEQ1_4
	MOV            	(_isr_#T21363_92) & 0X7F,	0x0		; Bank 1
	XORI           	0x1
	JBS            	PSW,	0x2
	GOTO           	#L21350
;     {
#line 374	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;         T8NIF = 0;					//清标志位
;  374:(    ASGN_0,          0 ,            ,     T8NIF)

; ITemplate_CLR_0_TMP
	BCC            	(_T8NIF_0)/8,	(_T8NIF_0)%8
#line 375	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;         T8N = 131;					//进中断先赋计数器初值
;  375:(    ASGN_1,        131 ,            ,       T8N)

; ITemplate_ASGN1_4_R
	MOVI           	0x83
	MOVA           	_T8N_0
#line 377	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 		if (timer_cnt < 250)
;  377:(    JGE_1U,  timer_cnt ,        250 ,   #L21350)

; ITemplate_JGE1_4U
	MOVI           	0xfa
	SUB            	(_timer_cnt) & 0X7F,	0x0		; Bank 1
	JBC            	PSW,	0x0
	GOTO           	#L21350
; 		{
#line 379	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 			timer_cnt++;
;  379:(     ADD_1,  timer_cnt ,          1 , timer_cnt)

; ITemplate_INC_1_TMP
	INC            	(_timer_cnt) & 0X7F		; Bank 1
#line 380	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 			if (timer_cnt >= 4)		//两字节间隔8ms
;  380:(    JLT_1U,  timer_cnt ,          4 ,   #L21350)

; ITemplate_JLT1_4U
	MOVI           	0x4
	SUB            	(_timer_cnt) & 0X7F,	0x0		; Bank 1
	JBS            	PSW,	0x0
	GOTO           	#L21350
; 			{
#line 382	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 				timer_cnt = 250;
;  382:(    ASGN_1,        250 ,            , timer_cnt)

; ITemplate_ASGN1_4_R
	MOVI           	0xfa
	MOVA           	(_timer_cnt) & 0X7F		; Bank 1
#line 383	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 				RX_OK_flag = 1;		//置位完成标志
;  383:(    ASGN_1,          1 ,            ,RX_OK_flag)

; ITemplate_ASGN1_4_R
	MOVI           	0x1
	MOVA           	(_RX_OK_flag) & 0X7F		; Bank 1
; 			}
; 		
; 		}
#line 387	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     }
;  387:(     LABEL,    #L21350 ,            ,          )

; ITemplate_LABEL
#L21350
#line 389	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     if(RX0IE==1 && RX0IF==1)
;  389:(    CVB_SC,      RX0IE ,            ,   #T21433)

; ITemplate_CVB_UC
	MOVI           	0x0
	JBC            	(_RX0IE_0)/8,	(_RX0IE_0)%8
	MOVI           	0x1
	MOVA           	(_isr_#T21433_92) & 0X7F		; Bank 1
;  389:(    JNEQ_1,          1 ,    #T21433 ,   #L21427)

; ITemplate_JNEQ1_4
	MOV            	(_isr_#T21433_92) & 0X7F,	0x0		; Bank 1
	XORI           	0x1
	JBS            	PSW,	0x2
	GOTO           	#L21427
;  389:(    CVB_SC,      RX0IF ,            ,   #T21440)

; ITemplate_CVB_UC
	MOVI           	0x0
	JBC            	(_RX0IF_0)/8,	(_RX0IF_0)%8
	MOVI           	0x1
	MOVA           	(_isr_#T21440_92) & 0X7F		; Bank 1
;  389:(    JNEQ_1,          1 ,    #T21440 ,   #L21427)

; ITemplate_JNEQ1_4
	MOV            	(_isr_#T21440_92) & 0X7F,	0x0		; Bank 1
	XORI           	0x1
	JBS            	PSW,	0x2
	GOTO           	#L21427
;     {
#line 391	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 		timer_cnt = 0;				//重新计数
;  391:(    ASGN_1,          0 ,            , timer_cnt)

; ITemplate_CLR1_4_TMP
	CLR            	(_timer_cnt) & 0X7F		; Bank 1
#line 392	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 		rxbuf[rxbuf[0] + 1] = RX0B;
;  392:(     ADD_1, *(rxbuf.0) ,          1 ,   #T21479)

; ITemplate_ADD1_4
	MOV            	(_rxbuf) & 0X7F,	0x0		; Bank 1
	ADDI           	0x1
	MOVA           	(_isr_#T21479_97) & 0X7F		; Bank 1
; ITemplate_Add_Ext_U
	CLR            	(_isr_#T21479_97+0x1) & 0X7F		; Bank 1
	RL             	(_isr_#T21479_97+0x1) & 0X7F,	0x1		; Bank 1
;  392:(     ADD_2,    #T21479 ,  (rxbuf.0) ,   #T21480)

; ITemplate_ADD1_4
	MOV            	(_isr_#T21479_97) & 0X7F,	0x0		; Bank 1
	ADDI           	_rxbuf
	MOVA           	(_isr_#T21480_97) & 0X7F		; Bank 1
	MOV            	(_isr_#T21479_97+0x1) & 0X7F,	0x0		; Bank 1
	ADDCI          	HIGH(_rxbuf)
	MOVA           	(_isr_#T21480_97+0x1) & 0X7F		; Bank 1
;  392:(    ASGN_1,       RX0B ,            ,  *#T21480)

; ITemplate_ASGN1_4
; ITemplate_SetFSR
	MOV            	(_isr_#T21480_97+0x1) & 0X7F,	0x0		; Bank 1
	MOVA           	IAAH
	MOV            	(_isr_#T21480_97) & 0X7F,	0x0		; Bank 1
	MOVA           	IAAL
	BSS            	BKSR,	0x4
	MOV            	_RX0B_0#sh,	0x0		; ShBank 1
; ITemplate_SetINDF
	MOVA           	IAD
	ISTEP          	0x1
#line 393	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 		rxbuf[0] = rxbuf[0] + 1;
;  393:(     ADD_1, *(rxbuf.0) ,          1 ,   #T21513)

; ITemplate_ADD1_4
	MOV            	(_rxbuf) & 0X7F,	0x0		; Bank 1
	ADDI           	0x1
	MOVA           	(_isr_#T21513_97) & 0X7F		; Bank 1
;  393:(    ASGN_1,    #T21513 ,            ,*(rxbuf.0))

; ITemplate_ASGN1_4
	MOV            	(_isr_#T21513_97) & 0X7F,	0x0		; Bank 1
	MOVA           	(_rxbuf) & 0X7F		; Bank 1
#line 395	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 		if(rxbuf[0] > 30)			//接收限制
;  395:(    JLE_1U, *(rxbuf.0) ,         30 ,   #L21427)

; ITemplate_JLE1_4U
	MOV            	(_rxbuf) & 0X7F,	0x0		; Bank 1
	SUBI           	0x1e
	JBC            	PSW,	0x0
	GOTO           	#L21427
; 		{
#line 397	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 			rxbuf[0] = 30;
;  397:(    ASGN_1,         30 ,            ,*(rxbuf.0))

; ITemplate_ASGN1_4
	MOVI           	0x1e
	MOVA           	(_rxbuf) & 0X7F		; Bank 1
; 		}
#line 399	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ;     }
;  399:(     LABEL,    #L21427 ,            ,          )

; ITemplate_LABEL
#L21427
#line 401	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 	if(KIE && KMSK4 && KIF)
;  401:(      JZ_0,        KIE ,            ,   #L21573)

; ITemplate_JZ_0
	JBS            	(_KIE_0)/8,	(_KIE_0)%8
	GOTO           	#L21573
;  401:(      JZ_0,      KMSK4 ,            ,   #L21573)

; ITemplate_JZ_0
	JBS            	(_KMSK4_0)/8,	(_KMSK4_0)%8
	GOTO           	#L21573
;  401:(      JZ_0,        KIF ,            ,   #L21573)

; ITemplate_JZ_0
	JBS            	(_KIF_0)/8,	(_KIF_0)%8
	GOTO           	#L21573
;     {
#line 403	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 		KIF = 0;       //清除外部中断
;  403:(    ASGN_0,          0 ,            ,       KIF)

; ITemplate_CLR_0_TMP
	BCC            	(_KIF_0)/8,	(_KIF_0)%8
#line 404	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 		if(IRQ)
;  404:(      JZ_0,        PB3 ,            ,   #L21573)

; ITemplate_JZ_0
	JBS            	(_PB3_0)/8,	(_PB3_0)%8
	GOTO           	#L21573
; 		{
#line 406	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; 			_hw2000b_irq_request = 1;
;  406:(    ASGN_0,          1 ,            ,_hw2000b_irq_request)

; ITemplate_SET_0_TMP
	SECTION        	0x0
	BSS            	((__hw2000b_irq_request)/8) & 0X7F,	(__hw2000b_irq_request)%8		; Bank 0
; 		}
;     }
#line 410	D:\毕业论文\ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016\src\main.c ; }
;  410:(     LABEL,    #L21573 ,            ,          )

; ITemplate_LABEL
#L21573
;  410:(     RET_I,            ,            ,          )

; ITemplate_RET_I
	SECTION        	0x0
	BCC            	BKSR,	0x4
	GOTO           	_INT_RESTORE		; Bank 0		; ShBank 0
; interrupt fun restore
INT_RESTORE	CSEG           
; ITemplate_InterruptPackedConstTail
_INT_RESTORE
	NOP            	
	NOP            	
	MOV            	(CSEG_PTR+0x3) & 0X7F,	0x0		; Bank 0
	MOVA           	(CSEG_PTR+0x1) & 0X7F		; Bank 0
	MOV            	(CSEG_PTR+0x2) & 0X7F,	0x0		; Bank 0
	MOVA           	(CSEG_PTR) & 0X7F		; Bank 0
	MOV            	(MUL_TEMP+0x2) & 0X7F,	0x0		; Bank 0
	MOVA           	(MUL_TEMP) & 0X7F		; Bank 0
	MOVA           	MULA
	MOV            	(MUL_TEMP+0x3) & 0X7F,	0x0		; Bank 0
	MOVA           	(MUL_TEMP+0x1) & 0X7F		; Bank 0
	MOVA           	MULB
	MOV            	(SAVED_FSR+0x1) & 0X7F,	0x0		; Bank 0
	MOVA           	IAAH
	MOV            	(SAVED_FSR) & 0X7F,	0x0		; Bank 0
	MOVA           	IAAL
	MOV            	(CSEG_PTR+0x5) & 0X7F,	0x0		; Bank 0
	MOVA           	FRAH
	MOV            	(CSEG_PTR+0x4) & 0X7F,	0x0		; Bank 0
	MOVA           	FRAL
	TBR            	
	POP            	
	RETIE          	

SECTION0C__Program_Files__x86__HRCC_Tools_HRCC_v1_2_0_139_tools_INCLUDE_ES7P0693_h_STATIC4	UNINTIAL       		; Bank 0
_#T0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC5	PSECT	FLAG=0X1088,ADDR=0X7FCA0
_DATARDTRG_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC6	PSECT	FLAG=0X1088,ADDR=0X7FCA2
_WREN_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC7	PSECT	FLAG=0X1088,ADDR=0X7FCA3
_FPEE_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC8	PSECT	FLAG=0X1088,ADDR=0X7FCA7
_DATARDEN_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC9	PSECT	FLAG=0X1088,ADDR=0X7FCB7
_GIE_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC10	PSECT	FLAG=0X1088,ADDR=0X7FCC9
_T8NIE_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC11	PSECT	FLAG=0X1088,ADDR=0X7FCCC
_KIE_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC12	PSECT	FLAG=0X1088,ADDR=0X7FCD1
_T8NIF_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC13	PSECT	FLAG=0X1088,ADDR=0X7FCD4
_KIF_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC14	PSECT	FLAG=0X1088,ADDR=0X7FCD8
_PIE0_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC15	PSECT	FLAG=0X1088,ADDR=0X7FCE0
_PIF0_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC16	PSECT	FLAG=0X1088,ADDR=0X7FCE9
_RX0IE_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC17	PSECT	FLAG=0X1088,ADDR=0X7FCF1
_RX0IF_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC18	PSECT	FLAG=0X1088,ADDR=0X7FD1C
_KMSK4_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC19	PSECT	FLAG=0X1088,ADDR=0X7FD4B
_PB3_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC20	PSECT	FLAG=0X1088,ADDR=0X7FDF7
_T8NEN_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC21	PSECT	FLAG=0X1088,ADDR=0X30684
_RX0TXEN_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC22	PSECT	FLAG=0X1088,ADDR=0X30686
_RX0LEN_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC23	PSECT	FLAG=0X1088,ADDR=0X30687
_RX0EN_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC24	PSECT	FLAG=0X1088,ADDR=0X30695
_BRGH0_0	RSEG           	0X1		; Bank 0

SECTION8D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC25	PSECT	FLAG=0X1088,ADDR=0X30696
_TX0LEN_0	RSEG           	0X1		; Bank 0

SECTION0D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC26	PSECT	FLAG=0x88
__hw2000b_irq_request	RSEG           	0X1		; Bank 0

SECTION0D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC27	PSECT	FLAG=0x88
_rx_ok	RSEG           	0X1		; Bank 0

SECTION1ID__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c29	IDATA          		0X82		; Bank 0
_sleep_flag	DB             	0X0,0XE4		; Bank 0

SECTION1ID__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c31	IDATA          		0X80		; Bank 0
_RX_OK_flag	DB             	0X0,0XE4		; Bank 0

SECTION1ID__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c33	IDATA          		0X81		; Bank 0
_dataerr	DB             	0X0,0XE4		; Bank 0

SECTION0D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC34	PSECT	FLAG=0x88
_DataFlashErsPage_#T20401_63	RSEG           	0X1		; Bank 0

SECTION0D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC35	PSECT	FLAG=0x88
_DataFlashRdData_#T20513_66	RSEG           	0X1		; Bank 0

SECTION0D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC36	PSECT	FLAG=0x88
_DataFlashWrData_#T20859_69	RSEG           	0X1		; Bank 0

SECTION1D__毕业论文_ES_DEV_ES7W8020_SDK_ZJ_NODC_FB_V3_20231016_src_main_c_STATIC	UNINTIAL       	0		; Bank 0
	ORG            	0X9B		; Bank 0
__ack_count	RSEG           	0X2		; Bank 0
	ORG            	0XA3		; Bank 0
_rxbuf	RSEG           	0X28		; Bank 0
	ORG            	0X98		; Bank 0
_timer_cnt	RSEG           	0X1		; Bank 0
	ORG            	0X95		; Bank 0
_CallFlashEn	RSEG           	0X1		; Bank 0
	ORG            	0X96		; Bank 0
_FlashEwEn	RSEG           	0X1		; Bank 0

SECTION8C__Program_Files__x86__HRCC_Tools_HRCC_v1_2_0_139_tools_INCLUDE_ES7P0693_h_STATIC	UNINTIAL       	0		; Bank 0
	ORG            	0XFF8E		; Bank 0
_FRALN_0	RSEG           	0X1		; Bank 0
	ORG            	0XFF8F		; Bank 0
_FRAHN_0	RSEG           	0X1		; Bank 0
	ORG            	0XFF90		; Bank 0
_FRAL_0	RSEG           	0X1		; Bank 0
	ORG            	0XFF91		; Bank 0
_FRAH_0	RSEG           	0X1		; Bank 0
	ORG            	0XFF92		; Bank 0
_ROMDL_0	RSEG           	0X1		; Bank 0
	ORG            	0XFF93		; Bank 0
_ROMDH_0	RSEG           	0X1		; Bank 0
	ORG            	0XFF94		; Bank 0
_ROMCL_0	RSEG           	0X1		; Bank 0
	ORG            	0XFF98		; Bank 0
_INTC0_0	RSEG           	0X1		; Bank 0
	ORG            	0XFF99		; Bank 0
_INTE0_0	RSEG           	0X1		; Bank 0
	ORG            	0XFF9A		; Bank 0
_INTF0_0	RSEG           	0X1		; Bank 0
	ORG            	0XFFA1		; Bank 0
_ROMD1L_0	RSEG           	0X1		; Bank 0
	ORG            	0XFFA2		; Bank 0
_ROMD1H_0	RSEG           	0X1		; Bank 0
	ORG            	0XFFA4		; Bank 0
_WDTC_0	RSEG           	0X1		; Bank 0
	ORG            	0XFFA6		; Bank 0
_WKDC_0	RSEG           	0X1		; Bank 0
	ORG            	0XFFA7		; Bank 0
_PWEN_0	RSEG           	0X1		; Bank 0
	ORG            	0XFFB6		; Bank 0
_PWRC_0	RSEG           	0X1		; Bank 0
	ORG            	0XFFBD		; Bank 0
_T8N_0	RSEG           	0X1		; Bank 0
	ORG            	0XFFBE		; Bank 0
_T8NC_0	RSEG           	0X1		; Bank 0
	ORG            	0X60CF		; Bank 0
_RX0B_0	RSEG           	0X1		; Bank 0
	ORG            	0X60D3		; Bank 0
_BR0R_0	RSEG           	0X1		; Bank 0
	ORG            	0XFF8E		; Bank 0
_FRAN_0	RSEG           	0X2		; Bank 0
	ORG            	0XFF90		; Bank 0
_FRA_0	RSEG           	0X2		; Bank 0
	END
